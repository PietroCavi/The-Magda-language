/* Generated By:JavaCC: Do not edit this line. Simple3.java */
public class Simple3 implements Simple3Constants {



  public static void main(String args[]) throws ParseException {
    System.out.println("Launching magda compiler");
    Simple3 parser = new Simple3(System.in);
    parser.Program();
//    parser.Input();
    System.out.println("Program successfully checked");
  }

  static final public int SomethingElse() throws ParseException {
   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTR:
      jj_consume_token(INSTR);
    {if (true) return 10;}
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
    {if (true) return Integer.parseInt(t.image);}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public int Something() throws ParseException {
  int t1, t2;
    jj_consume_token(IF);
    t1 = SomethingElse();
    jj_consume_token(THEN);
    t2 = SomethingElse();
    jj_consume_token(26);
   {if (true) return t1*t2;}
    throw new Error("Missing return statement in function");
  }

  static final public void Input() throws ParseException {
  int count;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      count = MatchedBraces();
      break;
    case IF:
      count = Something();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(0);
    System.out.println("The levels of nesting is " + count);
  }

  static final public int MatchedBraces() throws ParseException {
  int nested_count=0;
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      nested_count = MatchedBraces();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
    {if (true) return nested_count+1;}
    throw new Error("Missing return statement in function");
  }

/* --------------------------------------------------*/
/* -------------- Here starts Magda Grammar ---------*/
/* --------------------------------------------------*/
  static final public void FieldAssignment() throws ParseException {
    jj_consume_token(THIS);
    jj_consume_token(27);
    jj_consume_token(ID);
    jj_consume_token(27);
    jj_consume_token(ID);
    jj_consume_token(28);
    Expression();
  }

  static final public void WhileLoop() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(29);
    Expression();
    jj_consume_token(30);
    jj_consume_token(END);
  }

  static final public void VariableAssignment() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(28);
    Expression();
  }

  static final public void Instruction() throws ParseException {
    if (jj_2_1(2)) {
      Expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        VariableAssignment();
        break;
      case THIS:
        FieldAssignment();
        break;
      case WHILE:
        WhileLoop();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(31);
  }

  static final public void ActualParameters() throws ParseException {
    jj_consume_token(29);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
    case NEW:
    case ID:
    case 29:
      Expression();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
        jj_consume_token(32);
        Expression();
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(30);
  }

  static final public void MethodCallSuffix() throws ParseException {
  Token MethodMixin, MethodName;
    jj_consume_token(27);
    MethodMixin = jj_consume_token(ID);
    jj_consume_token(27);
    MethodName = jj_consume_token(ID);
    ActualParameters();
    System.out.println ("Call of method "+MethodMixin.image+ "/"+ MethodName.image);
  }

  static final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      jj_consume_token(THIS);
      break;
    case ID:
      jj_consume_token(ID);
      break;
    case 29:
      jj_consume_token(29);
      Expression();
      jj_consume_token(30);
      break;
    case NEW:
      ObjectCreation();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      MethodCallSuffix();
    }
  }

  static final public void ActualInitializationOfOneParam() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(28);
    Expression();
  }

  static final public void ActualInitializationOfParams() throws ParseException {
    jj_consume_token(29);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      ActualInitializationOfOneParam();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        jj_consume_token(32);
        ActualInitializationOfOneParam();
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(30);
  }

  static final public void ObjectCreation() throws ParseException {
    jj_consume_token(NEW);
    jj_consume_token(ID);
    ActualInitializationOfParams();
  }

  static final public void Declaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MIXIN:
      Mixin();
      break;
    case LET:
      LetDeclaration();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(31);
  }

/*void MixinExpressionContinuation():
{}
{ 
  ("," <ID> |
   "(" MixinExpression() ")"
  )*
}

void MixinExpression():
{}
{ ("(" MixinExpression() ")") |
  <ID>  MixinExpressionContinuation() 
}*/
  static final public void MixinExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      jj_consume_token(29);
      MixinExpression();
      jj_consume_token(30);
      break;
    case ID:
      jj_consume_token(ID);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
        jj_consume_token(32);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          jj_consume_token(ID);
          break;
        case 29:
          jj_consume_token(29);
          MixinExpression();
          jj_consume_token(30);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void FieldDeclaration() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(33);
    MixinExpression();
  }

  static final public void BaseRule() throws ParseException {
    jj_consume_token(REQ);
    jj_consume_token(ID);
  }

  static final public void ParameterDeclaration() throws ParseException {
    jj_consume_token(PARAM);
    jj_consume_token(ID);
    jj_consume_token(33);
    MixinExpression();
  }

  static final public void ReplacementRule() throws ParseException {
    jj_consume_token(REPL);
    jj_consume_token(ID);
    jj_consume_token(34);
    jj_consume_token(ID);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      jj_consume_token(32);
      jj_consume_token(ID);
    }
  }

  static final public void ParameterDecl() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(33);
    MixinExpression();
  }

  static final public void ParametersDecl() throws ParseException {
    jj_consume_token(29);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      ParameterDecl();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_6;
        }
        jj_consume_token(31);
        ParameterDecl();
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(30);
  }

  static final public void localVariablesDeclaration() throws ParseException {
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      jj_consume_token(ID);
      jj_consume_token(33);
      MixinExpression();
      jj_consume_token(31);
    }
  }

  static final public void MethodBody() throws ParseException {
    localVariablesDeclaration();
    jj_consume_token(BEGIN);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
      case THIS:
      case NEW:
      case ID:
      case 29:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      Instruction();
    }
    jj_consume_token(END);
  }

  static final public void MethodDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
      MixinExpression();
      jj_consume_token(ID);
      ParametersDecl();
      break;
    case NEW:
      jj_consume_token(NEW);
      MixinExpression();
      jj_consume_token(ID);
      ParametersDecl();
      MethodBody();
      break;
    case OVERRIDE:
      jj_consume_token(OVERRIDE);
      MixinExpression();
      jj_consume_token(ID);
      jj_consume_token(27);
      jj_consume_token(ID);
      ParametersDecl();
      MethodBody();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Mixin() throws ParseException {
    jj_consume_token(MIXIN);
    jj_consume_token(ID);
    jj_consume_token(OF);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case 29:
      MixinExpression();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(35);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REPL:
      case NEW:
      case ABSTRACT:
      case OVERRIDE:
      case PARAM:
      case REQ:
      case ID:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        FieldDeclaration();
        break;
      case NEW:
      case ABSTRACT:
      case OVERRIDE:
        MethodDeclaration();
        break;
      case PARAM:
        ParameterDeclaration();
        break;
      case REQ:
        BaseRule();
        break;
      case REPL:
        ReplacementRule();
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(31);
    jj_consume_token(END);
  }

  static final public void LetDeclaration() throws ParseException {
    jj_consume_token(LET);
    jj_consume_token(ID);
    jj_consume_token(35);
    MixinExpression();
  }

  static final public void Program() throws ParseException {
  Object m1;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LET:
      case MIXIN:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_10;
      }
      Declaration();

    }
    Instruction();
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_3R_16() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  static final private boolean jj_3R_13() {
    if (jj_3R_15()) return true;
    return false;
  }

  static final private boolean jj_3R_12() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    return false;
  }

  static final private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_14() {
    if (jj_3R_16()) return true;
    return false;
  }

  static final private boolean jj_3R_15() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public Simple3TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x2200000,0x402000,0x400000,0x10000c0,0x0,0x21000480,0x21000480,0x8000000,0x0,0x1000000,0xc0000,0x0,0x21000000,0x21000000,0x0,0x80000000,0x1000000,0x1000000,0x210004c0,0x1c00,0x21000000,0x100dc20,0x100dc20,0xc0000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public Simple3(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Simple3TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Simple3(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Simple3TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Simple3(Simple3TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(Simple3TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[36];
    for (int i = 0; i < 36; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
