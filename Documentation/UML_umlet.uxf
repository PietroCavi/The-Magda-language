<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="15.1">
  <zoom_level>1</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>867</x>
      <y>529</y>
      <w>26</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree
IProgramElem
{Interface}
--

+void :: print(PrintStream o)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>853</x>
      <y>558</y>
      <w>36</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>Package::ProgramTreee
CProgram
{Class}
--
-Decls: CGlobalDeclarations :: public
-CInstructions: Instrs :: public
--
+void :: print(PrintStream o)
+void :: CheckTypes()
+void :: GenCode(PrintStream o, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>870</x>
      <y>540</y>
      <w>12</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>100.0;10.0;100.0;90.0;10.0;90.0;10.0;180.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>895</x>
      <y>558</y>
      <w>34</w>
      <h>11</h>
    </coordinates>
    <panel_attributes>bg=#aaffaa
Package::ProgramTree
CProgramElemVector&lt;E extends IProgramElem&gt;
{Class}
--
+void :: printOne(PrintStream o,int i)
+void :: print(PrintStream o)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>879</x>
      <y>540</y>
      <w>35</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0;330.0;90.0;330.0;180.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>788</x>
      <y>558</y>
      <w>59</w>
      <h>17</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Declarations
IMethodDeclaration
{Interface}
--
+CParameterDeclarations :: getFormalParameters()
+CType :: getResultType(CMethodEnvironment env)
+void :: GenCode (java.io.PrintStream o, CMethodEnvironment env, CGenCodeHelper h)
+void :: CheckTypes(CMethodEnvironment env)
+void :: setMixin (CMixinDeclaration container)
+CMixinDeclaration :: getMixin()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>803</x>
      <y>586</y>
      <w>29</w>
      <h>10</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Declarations
INewMethodDeclaration
{Interface}
--
+String :: getMethodName()
+String :: getMixinName()
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>816</x>
      <y>534</y>
      <w>53</w>
      <h>26</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>510.0;10.0;10.0;10.0;10.0;240.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>816</x>
      <y>574</y>
      <w>3</w>
      <h>14</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>847</x>
      <y>586</y>
      <w>46</w>
      <h>29</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Declarations
CInterfaceMethodDeclaration
{Abstract Class}
--
-String: MethodName
-IMixinExpression: ResType
-CParameterDeclarations: Pars
-int: PosInCode
-String: ProgramFile
-CMixinDeclaration: ContainerMixin;
--
+CParameterDeclarations :: getFormalParameters()
+void :: CheckTypes(CMethodEnvironment env) THROWS CTypeError
+String :: getMethodName()
+CType :: getResultType(CMethodEnvironment env)
+void :: setMixin (CMixinDeclaration container)
+CMixinDeclaration :: getMixin()
+String :: getMixinName()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>831</x>
      <y>590</y>
      <w>18</w>
      <h>3</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>843</x>
      <y>627</y>
      <w>54</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Declarations
CAbstractMethodDeclaration
{Class}
--
+void :: print(PrintStream o)
+void :: GenCode (PrintStream o, CMethodEnvironment env, CGenCodeHelper h)
--
NOTE: il constructor Ã¨ protected, bisogna usare un factory statica per
instanziare un oggetto di questa classe, quindi al posto di "new", dovremo
chiamare "CAbstractMethodDeclaration.createCAbstractMethodDeclaration(. . .)"</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>869</x>
      <y>614</y>
      <w>3</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;130.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>953</x>
      <y>541</y>
      <w>54</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Declarations
CFieldDeclaration
{Class}
--
-String: VarName
-IMixinExpression: Type
--
+void :: print(PrintStream o)
+void :: CheckTypes(CMethodEnvironment env) THROWS CTypeError
+CType :: GetType(CMethodEnvironment env)
+void :: GenCode (PrintStream o, CMethodEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>879</x>
      <y>540</y>
      <w>76</w>
      <h>11</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0;740.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>899</x>
      <y>609</y>
      <w>47</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>bg=#aaffaa
Package::ProgramTree.Declarations
CFieldDeclarations :&lt;&gt;: &lt;CFieldDeclaration&gt;
{Class}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>911</x>
      <y>568</y>
      <w>13</w>
      <h>43</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;230.0;110.0;230.0;110.0;410.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>953</x>
      <y>564</y>
      <w>62</w>
      <h>17</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Declarations
IDeclaration
{Interface}
--
+void :: GenCode (PrintStream o, CEnvironment env, CGenCodeHelper h)
+String :: getName()
+void :: CheckTypes(CEnvironment env)
+CType :: GetType(CMethodEnvironment env)
+CType :: GetNativeType(CMethodEnvironment env)
+void :: GenCodeForMixinExpression(PrintStream o, CEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>892</x>
      <y>534</y>
      <w>140</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;1380.0;10.0;1380.0;390.0;1230.0;390.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>955</x>
      <y>609</y>
      <w>47</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>bg=#aaffaa
Package::ProgramTree.Declarations
CFieldDeclarations :&lt;&gt;: &lt;IDeclaration&gt;
{Class}
--
+void :: CheckTypes(){ 
+void :: GenCode (PrintStream o, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>911</x>
      <y>568</y>
      <w>70</w>
      <h>43</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;230.0;680.0;230.0;680.0;410.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>734</x>
      <y>514</y>
      <w>65</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Declarations
CMemberBody
{Class}
--
-CVariableDeclarations: Decls
-CInstructions: Instrs
--
+void :: print(java.io.PrintStream o)
+void :: CheckTypes(CInstrEnvironment env)
+void :: GenCode (PrintStream o, CInstrEnvironment env, CGenCodeHelper h, boolean returnNull)
--
NOTE: the BODY of a Method or a Initialization module
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>798</x>
      <y>522</y>
      <w>71</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>690.0;100.0;190.0;100.0;190.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>683</x>
      <y>558</y>
      <w>97</w>
      <h>11</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Declarations
CIniModuleBody
{Class}
--
+void :: GenCode (PrintStream o, CInstrEnvironment env, CGenCodeHelper h, String aMixinName, CSourceInitializationParameters InputParams)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>741</x>
      <y>533</y>
      <w>27</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>250.0;10.0;250.0;130.0;10.0;130.0;10.0;250.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1009</x>
      <y>609</y>
      <w>47</w>
      <h>10</h>
    </coordinates>
    <panel_attributes>bg=#aaffaa
Package::ProgramTree.Declarations
CMethodDeclarations :&lt;&gt;: &lt;COverrideMethodDeclaration&gt;
{Class}
--
+void :: setMixin (CMixinDeclaration container)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>911</x>
      <y>568</y>
      <w>123</w>
      <h>43</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;230.0;1210.0;230.0;1210.0;410.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>589</x>
      <y>558</y>
      <w>92</w>
      <h>11</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Declarations
CMethodBody
{Class}
--
+void GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h, String aMixinName, String aMethodName, boolean override)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>633</x>
      <y>533</y>
      <w>135</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>1330.0;10.0;1330.0;130.0;10.0;130.0;10.0;250.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>743</x>
      <y>586</y>
      <w>54</w>
      <h>33</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Declarations
CIniModuleDeclaration
{Interface}
--
-CIniModuleBody: Body
-int: PosInCode
-String: ProgramFile
-CSourceInitializationParameters: InputParams
-CSourceInitializationParameters: OutputParams
-String: MixinName
-boolean: isRequired
--
+void :: printHeader(PrintStream o) 
+String :: toString()
+void :: print(PrintStream o)
+CInstrEnvironment :: BuildEnv(CMethodEnvironment env)
+void :: CheckTypes(CIniModuleEnvironment env) THROWS CTypeError 
+void :: GenCode(PrintStream o, CMethodEnvironment env, CGenCodeHelper h)
+void :: modifyParametersList(CInitializationOfParams params)
+boolean :: activatedBy(CInitializationOfParams params)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>783</x>
      <y>531</y>
      <w>86</w>
      <h>57</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>840.0;10.0;280.0;10.0;280.0;80.0;10.0;80.0;10.0;550.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1062</x>
      <y>609</y>
      <w>47</w>
      <h>7</h>
    </coordinates>
    <panel_attributes>bg=#aaffaa
Package::ProgramTree.Declarations
CIniModuleDeclarations :&lt;&gt;: &lt;CIniModuleDeclaration&gt;
{Class}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>911</x>
      <y>568</y>
      <w>177</w>
      <h>43</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;230.0;1750.0;230.0;1750.0;410.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1045</x>
      <y>565</y>
      <w>62</w>
      <h>23</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Declarations
CLetDeclaration
{Class}
--
-String: varName
-IMixinExpression: boundExpr
--
+void :: print(PrintStream o)
+CType :: GetType(CMethodEnvironment env)
+CType :: GetNativeType(CMethodEnvironment env) 
+void :: CheckTypes(CEnvironment env)
+void :: GenCode (PrintStream o, CEnvironment env, CGenCodeHelper h)
+String :: getName()
+void :: GenCodeForMixinExpression(PrintStream o, CEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1014</x>
      <y>576</y>
      <w>33</w>
      <h>3</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;310.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>774</x>
      <y>627</y>
      <w>55</w>
      <h>39</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Declarations
COverrideMethodDeclaration
{Class}
--
-String: MixinName
-String: MethodName
-CMethodBody: Body
-IMixinExpression: ResType
-CParameterDeclarations: Pars
-CMixinDeclaration: ContainerMixin
-int: LineNo
-String: ProgramFile
--
+void print(java.io.PrintStream o){ 
+CType :: getResultType(CMethodEnvironment env)
+CInstrEnvironment :: BuildEnv(CMethodEnvironment env)
+INewMethodDeclaration :: GetSourceMethod(CMethodEnvironment  env)
+void :: CheckTypes(CMethodEnvironment env)
+void :: GenCode(PrintStream o, CMethodEnvironment env, CGenCodeHelper h)
+CMixinDeclaration :: getMixin()
+void :: setMixin(CMixinDeclaration container)
--
NOTE: il constructor Ã¨ protected, bisogna usare un factory statica per
instanziare un oggetto di questa classe, quindi al posto di "new", dovremo
chiamare "COverrideMethodDeclaration.createCOverrideMethodDeclaration(. . .)"</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>799</x>
      <y>574</y>
      <w>3</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;530.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>843</x>
      <y>656</y>
      <w>56</w>
      <h>22</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Declarations
CNewMethodDeclaration
{Class}
--
-CMethodBody: Body
--
+void :: print(java.io.PrintStream o)
+CInstrEnvironment :: BuildEnv(CMethodEnvironment env)
+void :: CheckTypes(CMethodEnvironment env)
+void :: GenCode(PrintStream o, CMethodEnvironment env, CGenCodeHelper h)
--
NOTE: il constructor Ã¨ protected, bisogna usare un factory statica per
instanziare un oggetto di questa classe, quindi al posto di "new", dovremo
chiamare "CNewMethodDeclaration.createCNewMethodDeclaration(. . .)"</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>835</x>
      <y>606</y>
      <w>37</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>120.0;10.0;10.0;10.0;10.0;460.0;350.0;460.0;350.0;500.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1115</x>
      <y>609</y>
      <w>47</w>
      <h>10</h>
    </coordinates>
    <panel_attributes>bg=#aaffaa
Package::ProgramTree.Declarations
CNewMethodDeclarations :&lt;&gt;: &lt;INewMethodDeclaration&gt;
{Class}
--
+void :: setMixin(CMixinDeclaration container)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>911</x>
      <y>568</y>
      <w>381</w>
      <h>43</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;230.0;3790.0;230.0;3790.0;410.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>684</x>
      <y>586</y>
      <w>54</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Declarations
CParameterDeclaration
{Class}
--
-String: ParName
-IMixinExpression: Type
--
+void :: print(PrintStream o)
+CType :: GetType(CMethodEnvironment env)
+void :: GenCode(PrintStream o, CMethodEnvironment env, CGenCodeHelper h)
+String :: ExpandVariableInNative(String input, int i)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>708</x>
      <y>531</y>
      <w>161</w>
      <h>57</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>1590.0;10.0;1030.0;10.0;1030.0;80.0;760.0;80.0;760.0;470.0;10.0;470.0;10.0;550.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1168</x>
      <y>609</y>
      <w>90</w>
      <h>19</h>
    </coordinates>
    <panel_attributes>bg=#aaffaa
Package::ProgramTree.Declarations
CParameterDeclarations :&lt;&gt;: &lt;CParameterDeclaration&gt;
{Class}
--
-IMethodDeclaration: method
--
+int :: indexOfName(String name)
+String :: ExpandVariablesInNative(String input)
+void :: CheckTypes(CMethodEnvironment env) THROWS CTypeError
+boolean :: isIsomorphicTo(CType targetType, CMethodEnvironment env, CParameterDeclarations other) THROWS CTypeError
+void :: setMethod(IMethodDeclaration amethod)
+void :: CheckTypesOfActualParameters(CType targetType, CInstrEnvironment env, CExpressionList ActualParams) THROWS CTypeError</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>911</x>
      <y>568</y>
      <w>230</w>
      <h>43</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;230.0;2280.0;230.0;2280.0;410.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>647</x>
      <y>586</y>
      <w>32</w>
      <h>17</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Declarations
CSourceInitializationParameter
{Class}
--
-String: MixinName
-String: ParName
-IMixinExpression: Type
--
+void :: print(PrintStream o)
+CType :: GetType(CMethodEnvironment env)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>662</x>
      <y>531</y>
      <w>207</w>
      <h>57</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>2050.0;10.0;1490.0;10.0;1490.0;80.0;1220.0;80.0;1220.0;470.0;10.0;470.0;10.0;550.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1264</x>
      <y>609</y>
      <w>51</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>bg=#aaffaa
Package::ProgramTree.Declarations
CSourceInitializationParameters :&lt;&gt;: &lt;CSourceInitializationParameter&gt;
{Class}
--
+CParameterDeclarations :: toFlatParameters()
+boolean :: containsParam(String MixinName, String ParName)
+void :: CheckTypes(CMethodEnvironment env) THROWS CTypeError</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>911</x>
      <y>568</y>
      <w>304</w>
      <h>43</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;230.0;3020.0;230.0;3020.0;410.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>607</x>
      <y>586</y>
      <w>35</w>
      <h>17</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Declarations
CVariableDeclaration
{Class}
--
-String: VarName
-IMixinExpression: Type
--
+CType :: GetType(CMethodEnvironment env)
+String :: toString()
+void :: print(PrintStream o)
+String :: ExpandVariableInNative(String input, int i)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>624</x>
      <y>531</y>
      <w>245</w>
      <h>57</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>2430.0;10.0;1870.0;10.0;1870.0;80.0;1600.0;80.0;1600.0;470.0;10.0;470.0;10.0;550.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1321</x>
      <y>609</y>
      <w>35</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>bg=#aaffaa
Package::ProgramTree.Declarations
CVariableDeclarations :&lt;&gt;: &lt;CVariableDeclaration&gt;
{Class}
--
+int :: indexOfName(String name)
+void :: CheckTypes(CInstrEnvironment env)
+String :: ExpandVariablesInNative(String input)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>911</x>
      <y>568</y>
      <w>471</w>
      <h>43</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;230.0;4690.0;230.0;4690.0;410.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1362</x>
      <y>609</y>
      <w>35</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>bg=#aaffaa
Package::ProgramTree.Declarations
CPolymorphismParams :&lt;&gt;: &lt;CPolymorphismParam&gt;
{Class}
--
+CPolymorphismParam :: findByName(String aName) 
+void :: setMixin(CMixinDeclaration container)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>911</x>
      <y>568</y>
      <w>429</w>
      <h>43</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;230.0;4270.0;230.0;4270.0;410.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1045</x>
      <y>502</y>
      <w>86</w>
      <h>59</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Declarations
CMixinDeclaration
{Class}
--
-String: MixinName
-IMixinExpression: BaseMixinExpression
-CPolymorphismParams: polyPars
-CMethodDeclarations: OverridenMethods
-CNewMethodDeclarations: NewMethods
-CIniModuleDeclarations: IniModules
-CFieldDeclarations: Flds
--
+CPolyApplicationValues :: getApplications(CMethodEnvironment env)
+CNewMethodDeclarations :: calcAbstractMethods(CMethodEnvironment env, CNewMethodDeclarations prevAbstractMethods)
+CType :: GetNativeType(CMethodEnvironment env)
+CType :: GetType(CMethodEnvironment env)
+int :: getCountOfNewMethods()
+int :: getLayerSize()
+int :: getMethodOffset(String name)
+INewMethodDeclaration :: getNewMethod(String name)
+CType :: getMethodResultType(CEnvironment env, String name)
+CType :: getFieldParamType(CEnvironment env, String name)
+CType :: getIniParamType(CEnvironment env, String ParamName)
+int :: getFieldParamOffset(String name)
+void :: print(PrintStream o)
+boolean :: ModuleContainsInputParameter(CSourceInitializationParameter par)
+boolean :: ModuleContainsInputParameter(CSourceInitializationParameter par, int ModuleNumber)
+void :: CheckTypes(CEnvironment env)
+void :: GenCode(PrintStream o, CEnvironment env, CGenCodeHelper h)
+String :: getCaption()
+String :: getName()
+String :: CodeForMixin()
+void :: GenCodeForMixinExpression(PrintStream o, CEnvironment env, CGenCodeHelper h)
--
NOTE: il constructor Ã¨ protected, bisogna usare un factory statica per
instanziare un oggetto di questa classe, quindi al posto di "new", dovremo
chiamare "CAbstractMethodDeclaration.createCAbstractMethodDeclaration(. . .)"</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1014</x>
      <y>544</y>
      <w>33</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;330.0;240.0;330.0;240.0;10.0;310.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1047</x>
      <y>254</y>
      <w>48</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>Package::Compiler
ITypeElement
{Interface}
--
+String :: getName()
+String :: getCaption()
+CPolyApplicationValues :: getApplications(CMethodEnvironment env)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>972</x>
      <y>265</y>
      <w>130</w>
      <h>239</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>980.0;10.0;980.0;210.0;10.0;210.0;10.0;900.0;1280.0;900.0;1280.0;2210.0;1140.0;2210.0;1140.0;2370.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>972</x>
      <y>488</y>
      <w>62</w>
      <h>31</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Declarations
CPolymorphismParam
{Class}
--
-String: Name
-IMixinExpression: BoundExpr
-CMixinDeclaration: container
--
+String :: getCaption()
+String :: getName()
+CPolyApplicationValues :: getApplications(CMethodEnvironment env)
+void :: print(PrintStream o)
+void :: GenCodeForMixinExpression(PrintStream o, CEnvironment env, CGenCodeHelper h)
+CType :: GetBoundingType(CEnvironment env)
+CType :: GetType(CMethodEnvironment env)
+CType :: GetNativeType (CMethodEnvironment env)
+void :: setMixin(CMixinDeclaration acontainer)
+void :: CheckTypes(CEnvironment env)
+void :: GenCode (PrintStream o, CEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>892</x>
      <y>518</y>
      <w>95</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;140.0;930.0;140.0;930.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1014</x>
      <y>518</y>
      <w>26</w>
      <h>61</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;590.0;240.0;590.0;240.0;140.0;10.0;140.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>972</x>
      <y>265</y>
      <w>130</w>
      <h>233</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>980.0;10.0;980.0;210.0;10.0;210.0;10.0;900.0;1280.0;900.0;1280.0;2210.0;750.0;2210.0;750.0;2310.0;620.0;2310.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>838</x>
      <y>409</y>
      <w>62</w>
      <h>13</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
IExpression
{Interface}
--
 +CType :: GetType(CInstrEnvironment env)
 +String :: GetTypeString()
 +void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h, int resultPlace)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>870</x>
      <y>421</y>
      <w>3</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;1080.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>734</x>
      <y>409</y>
      <w>59</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CMethodCallExpression
{Class}
--
-IExpression: MethodTarget
-String: MixinName
-String: MethodName
-CExpressionList: Params
--
+void :: print(PrintStream o)
+CType :: GetType(CInstrEnvironment env)
+String :: GetTypeString()
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h, int target)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>792</x>
      <y>416</y>
      <w>48</w>
      <h>3</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>460.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>635</x>
      <y>409</y>
      <w>59</w>
      <h>9</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CBinaryExpression
{Class}
--
+CExpressionList :: toList(IExpression a)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>693</x>
      <y>415</y>
      <w>43</w>
      <h>3</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>410.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>545</x>
      <y>409</y>
      <w>59</w>
      <h>7</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CBinaryExpressionAdd
{Class}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>603</x>
      <y>411</y>
      <w>34</w>
      <h>3</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>320.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>545</x>
      <y>418</y>
      <w>59</w>
      <h>7</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CBinaryExpressionDivide
{Class}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>603</x>
      <y>411</y>
      <w>34</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>320.0;10.0;130.0;10.0;130.0;100.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>545</x>
      <y>427</y>
      <w>59</w>
      <h>7</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CBinaryExpressionEqual
{Class}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>603</x>
      <y>411</y>
      <w>34</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>320.0;10.0;130.0;10.0;130.0;190.0;10.0;190.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>545</x>
      <y>436</y>
      <w>59</w>
      <h>7</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CBinaryExpressionLeq
{Class}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>603</x>
      <y>411</y>
      <w>34</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>320.0;10.0;130.0;10.0;130.0;280.0;10.0;280.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>603</x>
      <y>411</y>
      <w>34</w>
      <h>39</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>320.0;10.0;130.0;10.0;130.0;370.0;10.0;370.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>545</x>
      <y>445</y>
      <w>59</w>
      <h>7</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CBinaryExpressionLess
{Class}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>545</x>
      <y>454</y>
      <w>59</w>
      <h>7</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CBinaryExpressionMultiply
{Class}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>603</x>
      <y>411</y>
      <w>34</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>320.0;10.0;130.0;10.0;130.0;460.0;10.0;460.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>545</x>
      <y>489</y>
      <w>59</w>
      <h>7</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CBinaryExpressionSub
{Class}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>545</x>
      <y>472</y>
      <w>59</w>
      <h>14</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CBinaryExpressionStrongEqual
{Class}
--
+void :: print(PrintStream o)
+CType :: GetType(CInstrEnvironment env)
+String :: GetTypeString()
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h, int target)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>545</x>
      <y>463</y>
      <w>59</w>
      <h>7</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CBinaryExpressionNeq
{Class}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>603</x>
      <y>411</y>
      <w>34</w>
      <h>57</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>320.0;10.0;130.0;10.0;130.0;550.0;10.0;550.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>603</x>
      <y>411</y>
      <w>34</w>
      <h>71</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>320.0;10.0;130.0;10.0;130.0;690.0;10.0;690.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>603</x>
      <y>411</y>
      <w>34</w>
      <h>83</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>320.0;10.0;130.0;10.0;130.0;810.0;10.0;810.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>766</x>
      <y>372</y>
      <w>59</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CBooleanLiteral
{Class}
--
-boolean: Value
--
+CType :: GetType(CInstrEnvironment env)
+String :: GetTypeString()
+void :: print(PrintStream o)
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h, int target)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>824</x>
      <y>382</y>
      <w>25</w>
      <h>29</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>230.0;270.0;230.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>766</x>
      <y>354</y>
      <w>59</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CByteLiteral
{Class}
--
-byte: Value
--
+void :: print(PrintStream o)
+CType :: GetType(CInstrEnvironment env)
+String :: GetTypeString()
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h, int target)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>824</x>
      <y>364</y>
      <w>25</w>
      <h>47</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>230.0;450.0;230.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>766</x>
      <y>336</y>
      <w>59</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CIntegerLiteral
{Class}
--
-int: Value
--
+void :: print(PrintStream o)
+CType :: GetType(CInstrEnvironment env)
+String :: GetTypeString()
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h, int target)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>824</x>
      <y>346</y>
      <w>25</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>230.0;630.0;230.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>766</x>
      <y>318</y>
      <w>59</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CFloatLiteral
{Class}
--
-float: Value
--
+void :: print(PrintStream o)
+CType :: GetType(CInstrEnvironment env)
+String :: GetTypeString()
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h, int target)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>824</x>
      <y>328</y>
      <w>25</w>
      <h>83</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>230.0;810.0;230.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>766</x>
      <y>300</y>
      <w>59</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CStringLiteral
{Class}
--
-String: Value
--
+void :: print(PrintStream o)
+CType :: GetType(CInstrEnvironment env)
+String :: GetTypeString()
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h, int target)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>824</x>
      <y>310</y>
      <w>25</w>
      <h>101</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>230.0;990.0;230.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>997</x>
      <y>325</y>
      <w>60</w>
      <h>10</h>
    </coordinates>
    <panel_attributes>bg=#aaffaa
Package::ProgramTree.Expressions
CExpressionList :&lt;&gt;: &lt;IExpression&gt;
{Class}
--
+void :: printOne(PrintStream o, int i)
+void :: GenCodeForParams(PrintStream o, CInstrEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>911</x>
      <y>311</y>
      <w>271</w>
      <h>282</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;2580.0;10.0;2800.0;2690.0;2800.0;2690.0;10.0;1460.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>997</x>
      <y>308</y>
      <w>60</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>bg=#aaffaa
Package::ProgramTree.Expressions
CInitializationOfParams :&lt;&gt;: &lt;CInitializationOfParam&gt;
{Class}
--
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h, int target)
+void :: CheckTypes(CInstrEnvironment env)
+CInitializationOfParam :: locateParam(String MixinName, String ParamName)
+void :: removeParam(String MixinName, String ParamName){
+boolean :: containsParam(String MixinName, String ParamName)
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>911</x>
      <y>328</y>
      <w>271</w>
      <h>265</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;2410.0;10.0;2630.0;2690.0;2630.0;2690.0;10.0;1460.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>877</x>
      <y>257</y>
      <w>59</w>
      <h>19</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CFieldSelectExpression
{Class}
--
-IExpression: SelectTarget
-String: MixinName
-String: FieldName
--
+CType :: GetType(CInstrEnvironment env)
+String :: GetTypeString ()
+void :: print(PrintStream o)
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h, int target)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>859</x>
      <y>267</y>
      <w>20</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;1420.0;10.0;10.0;180.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>877</x>
      <y>239</y>
      <w>59</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CIdentifierExpression
{Class}
--
-String: Name
--
+void :: print(PrintStream o)
+CType :: GetType(CInstrEnvironment env)
+String :: GetTypeString()
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h, int target)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>859</x>
      <y>230</y>
      <w>20</w>
      <h>181</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;1790.0;10.0;10.0;180.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>959</x>
      <y>369</y>
      <w>59</w>
      <h>19</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CInitializationOfParam
{Class}
--
-String: MixinName
-String: ParamName
-IExpression: Expr
--
+void :: print(PrintStream o)
+String :: toString()
+void :: CheckTypes(CInstrEnvironment env)
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h, int target)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>883</x>
      <y>387</y>
      <w>107</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;1420.0;10.0;620.0;1050.0;620.0;1050.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>877</x>
      <y>224</y>
      <w>59</w>
      <h>13</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CNullExpression
{Class}
--
+void :: print(PrintStream o)
+CType :: GetType(CInstrEnvironment env)
+String :: GetTypeString()
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h, int target)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>859</x>
      <y>249</y>
      <w>20</w>
      <h>162</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;1600.0;10.0;10.0;180.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>877</x>
      <y>209</y>
      <w>59</w>
      <h>13</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CThisExpression
{Class}
--
+void :: print(PrintStream o)
+CType :: GetType(CInstrEnvironment env)
+String :: GetTypeString()
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h, int target)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>859</x>
      <y>215</y>
      <w>20</w>
      <h>196</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;1940.0;10.0;10.0;180.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>877</x>
      <y>192</y>
      <w>59</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CSuperCallExpression
{Class}
--
-CExpressionList: Params
--
+void :: print(PrintStream o)
+CType :: GetType(CInstrEnvironment env)
+String :: GetTypeString()
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h, int target)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>859</x>
      <y>200</y>
      <w>20</w>
      <h>211</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;2090.0;10.0;10.0;180.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>877</x>
      <y>173</y>
      <w>59</w>
      <h>17</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Expressions
CObjectCreation
{Class}
--
-CInitializationOfParams: Init
-IMixinExpression: MixinExpr
--
+void :: print(PrintStream o)
+CType :: GetType(CInstrEnvironment env)
+String :: GetTypeString()
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h, int target)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>859</x>
      <y>179</y>
      <w>20</w>
      <h>232</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;2300.0;10.0;10.0;180.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>416</x>
      <y>520</y>
      <w>52</w>
      <h>11</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Instructions
IInstruction
{Interface}
--
+void :: CheckTypes(CInstrEnvironment env)
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>467</x>
      <y>490</y>
      <w>406</w>
      <h>41</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>4040.0;390.0;4040.0;10.0;1900.0;10.0;1900.0;370.0;10.0;370.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>329</x>
      <y>520</y>
      <w>52</w>
      <h>14</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Instructions
CInstruction
{Class}
--
-int: PosInProgram
-String: ProgramFile
--
+void :: CheckTypes(CInstrEnvironment env)
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>380</x>
      <y>526</y>
      <w>38</w>
      <h>3</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>360.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>242</x>
      <y>520</y>
      <w>52</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Instructions
CAssignment
{Class}
--
-ILValue: LVal
-IExpression: Expr
--
+void :: CheckTypes(CInstrEnvironment env)
+void :: print(PrintStream o)
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>293</x>
      <y>526</y>
      <w>38</w>
      <h>3</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>360.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>242</x>
      <y>504</y>
      <w>52</w>
      <h>14</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Instructions
CExprInstruction
{Class}
--
-IExpression: Expr
--
+void :: CheckTypes(CInstrEnvironment env)
+void :: print(PrintStream o)
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>293</x>
      <y>510</y>
      <w>38</w>
      <h>19</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>360.0;170.0;170.0;170.0;170.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>242</x>
      <y>485</y>
      <w>52</w>
      <h>17</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Instructions
CIfCondInstruction
{Class}
--
-IExpression: Cond
-CInstructions: TrueInstrs
-CInstructions: FalseInstrs
--
+void :: CheckTypes(CInstrEnvironment env)
+void :: print(PrintStream o)
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>293</x>
      <y>491</y>
      <w>38</w>
      <h>38</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>360.0;360.0;170.0;360.0;170.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>242</x>
      <y>469</y>
      <w>52</w>
      <h>14</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Instructions
CIniModuleSuperInstruction
{Class}
--
-CInitializationOfParams: params
--
+void :: CheckTypes(CInstrEnvironment env)
+void :: print(PrintStream o)
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>293</x>
      <y>475</y>
      <w>38</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>360.0;520.0;170.0;520.0;170.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>242</x>
      <y>453</y>
      <w>52</w>
      <h>14</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Instructions
CNativeInstruction
{Class}
--
-String: Code
--
+void :: CheckTypes(CInstrEnvironment env)
+void :: print(PrintStream o)
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>293</x>
      <y>459</y>
      <w>38</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>360.0;680.0;170.0;680.0;170.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>242</x>
      <y>437</y>
      <w>52</w>
      <h>14</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Instructions
CReturnInstruction
{Class}
--
-IExpression: Expr
--
+void :: CheckTypes(CInstrEnvironment env)
+void :: print(PrintStream o)
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>293</x>
      <y>443</y>
      <w>38</w>
      <h>86</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>360.0;840.0;170.0;840.0;170.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>242</x>
      <y>420</y>
      <w>52</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.Instructions
CWhileLoopInstruction
{Class}
--
-IExpression: expr
-CInstructions: instrs
--
+void :: CheckTypes(CInstrEnvironment env)
+void :: print(PrintStream o)
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>293</x>
      <y>426</y>
      <w>38</w>
      <h>103</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>360.0;1010.0;170.0;1010.0;170.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>241</x>
      <y>550</y>
      <w>52</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>bg=#aaffaa
Package::ProgramTree.Instructions
CInstructions :&lt;&gt;: &lt;IInstruction&gt;
{Class}
--
+void :: CheckTypes(CInstrEnvironment env)
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>266</x>
      <y>564</y>
      <w>1169</w>
      <h>179</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>6460.0;50.0;6460.0;270.0;11670.0;270.0;11670.0;1770.0;10.0;1770.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>498</x>
      <y>558</y>
      <w>52</w>
      <h>10</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.LValues
ILValue
{Interface}
--
+CType :: GetType(CInstrEnvironment env)
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h)
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>549</x>
      <y>490</y>
      <w>324</w>
      <h>74</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>3220.0;390.0;3220.0;10.0;1080.0;10.0;1080.0;370.0;270.0;370.0;270.0;720.0;10.0;720.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>426</x>
      <y>558</y>
      <w>52</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.LValues
CFieldLValue
{Class}
--
-String: MixinName
-String: FieldName
--
+CType :: GetType(CInstrEnvironment env) 
+void :: print(PrintStream o)
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>477</x>
      <y>561</y>
      <w>23</w>
      <h>3</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>210.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>426</x>
      <y>576</y>
      <w>52</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.LValues
CVariableLValue
{Class}
--
-String: VarName
--
+CType :: GetType(CInstrEnvironment env) 
+void :: print(PrintStream o)
+void :: GenCode(PrintStream o, CInstrEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>477</x>
      <y>561</y>
      <w>23</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>210.0;10.0;110.0;10.0;110.0;190.0;10.0;190.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>498</x>
      <y>611</y>
      <w>62</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.MixinExpressions
IMixinExpression
{Interface}
--
+CType :: GetType(CMethodEnvironment env) THROWS CTypeError
+CType :: GetNativeType (CMethodEnvironment env) THROWS CTypeError
+void :: GenCodeForMixinExpression(PrintStream o, CEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>559</x>
      <y>490</y>
      <w>314</w>
      <h>127</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>3120.0;390.0;3120.0;10.0;980.0;10.0;980.0;370.0;170.0;370.0;170.0;1250.0;10.0;1250.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>416</x>
      <y>611</y>
      <w>62</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.MixinExpressions
CMixinExpressionApplication
{Class}
--
-String: MixinName
-String: ParamName
-IMixinExpression: value
--
+CType :: GetType(CMethodEnvironment env)
+CType :: GetNativeType(CMethodEnvironment env) THROWS CTypeError
+String :: toString()
+void :: print(PrintStream o)
+void :: GenCodeForMixinExpression(PrintStream o, CEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>477</x>
      <y>614</y>
      <w>23</w>
      <h>26</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>210.0;10.0;110.0;10.0;110.0;240.0;10.0;240.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>477</x>
      <y>614</y>
      <w>23</w>
      <h>3</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>210.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>416</x>
      <y>634</y>
      <w>62</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.MixinExpressions
CMixinExpressionConcatenation
{Class}
--
-String: MixinName
-IMixinExpression: left 
-IMixinExpression: right
--
+CType :: GetType(CMethodEnvironment env)
+CType :: GetNativeType(CMethodEnvironment env) THROWS CTypeError
+String :: toString()
+void :: print(PrintStream o)
+void :: GenCodeForMixinExpression(PrintStream o, CEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>416</x>
      <y>657</y>
      <w>62</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.MixinExpressions
CMixinExpressionIdentifier
{Class}
--
-String: MixinName
--
+CType :: GetType(CMethodEnvironment env) THROWS CTypeError
+CType :: GetNativeType(CMethodEnvironment env) THROWS CTypeError
+String :: toString()
+void :: print(PrintStream o)
+void :: GenCodeForMixinExpression(PrintStream o, CEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>477</x>
      <y>614</y>
      <w>23</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>210.0;10.0;110.0;10.0;110.0;470.0;10.0;470.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>416</x>
      <y>677</y>
      <w>62</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>Package::ProgramTree.MixinExpressions
CMixinExpressionVoid
{Class}
--
+CType :: GetType(CMethodEnvironment env)
+CType :: GetNativeType(CMethodEnvironment env) THROWS CTypeError
+String :: toString()
+void :: print(PrintStream o)
+void :: GenCodeForMixinExpression(PrintStream o, CEnvironment env, CGenCodeHelper h)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>477</x>
      <y>614</y>
      <w>23</w>
      <h>69</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>210.0;10.0;110.0;10.0;110.0;670.0;10.0;670.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1142</x>
      <y>219</y>
      <w>37</w>
      <h>9</h>
    </coordinates>
    <panel_attributes>Package::Compiler
CBuiltins
{Class}
--
+STATIC void :: addBuiltins(CGlobalDeclarations decls)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1142</x>
      <y>203</y>
      <w>34</w>
      <h>14</h>
    </coordinates>
    <panel_attributes>Package::Compiler
CEnvironment
{Class}
--
-CGlobalDeclarations: Decls
-Dictionary&lt;IDeclaration,CType&gt;: calculatedTypes
--
+CMixinDeclaration :: getMixin(String name)
+IDeclaration :: getDeclaration(String name)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1142</x>
      <y>230</y>
      <w>34</w>
      <h>14</h>
    </coordinates>
    <panel_attributes>Package::Compiler
CGenCodeHelper
{Class}
--
-int: tempCnt
--
+void :: resetTemp()
+int :: getTemp()
+String :: tempAcc(int tempNo)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1142</x>
      <y>180</y>
      <w>34</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>Package::Compiler
CMethodEnvironment
{Class}
--
-CMixinDeclaration: CurrentMixin
--
+ITypeElement :: getTypeElement(String aName) 
+IDeclaration :: getDeclaration(String name)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1158</x>
      <y>191</y>
      <w>3</w>
      <h>14</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1158</x>
      <y>168</y>
      <w>3</w>
      <h>14</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1142</x>
      <y>160</y>
      <w>34</w>
      <h>9</h>
    </coordinates>
    <panel_attributes>Package::Compiler
CMethodEnvironment
{Class}
--
-int: moduleNumber</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1179</x>
      <y>149</y>
      <w>34</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>Package::Compiler
CInstrEnvironment
{Class}
--
-CVariableDeclarations: Vars
-CParameterDeclarations: Params
-IMethodDeclaration: currentMethod
-CIniModuleDeclaration: currentIniModule
--
+CType :: findParamOrVariableType(String name)
+int :: getVariableOffset(String name)
+int :: getParameterOffset(String name)
+String :: ExpandVariablesInNative(String input)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1158</x>
      <y>168</y>
      <w>40</w>
      <h>14</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;50.0;380.0;50.0;380.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1142</x>
      <y>246</y>
      <w>34</w>
      <h>10</h>
    </coordinates>
    <panel_attributes>Package::Compiler
CPolyApplicationValue
{Class}
--
-CPolymorphismParam: param
-CType: value</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1142</x>
      <y>259</y>
      <w>37</w>
      <h>9</h>
    </coordinates>
    <panel_attributes>bg=#aaffaa
Package::Compiler
CPolyApplicationValues :&lt;&gt;: &lt;CPolyApplicationValue&gt;
{Class}
--
+int :: indexOfParam(CPolymorphismParam aParam)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1029</x>
      <y>196</y>
      <w>83</w>
      <h>44</h>
    </coordinates>
    <panel_attributes>bg=#aaffaa
Package::Compiler
CType :&lt;&gt;: &lt;ITypeElement&gt;
{Class}
--
-boolean: isAll
-CPolyApplicationValues: app
-CType: lastChecked
--
+CPolyApplicationValues :: getApplications(CMethodEnvironment env)
+CType :: deepCopy()
+void :: addNewAtStart(CType other)
+CType :: sumWith(CType other)
+void :: addNew(CType other)
+String :: toString()
+void :: CheckIsSubTypeOf(CEnvironment env, CType other) THROWS CTypeError
+boolean :: isIsomorphicTo(CEnvironment env, CType other)
+boolean :: ModuleContainsInputParameter(CEnvironment env,  CSourceInitializationParameter par)
+boolean :: containsTypeElem(CEnvironment env, ITypeElement el)
+boolean :: isSubTypeOf(CEnvironment env, CType other)
+CNewMethodDeclarations :: calcAbstractMethods(CMethodEnvironment env)
+int :: GenCodeForActivatedModules(PrintStream o, CInstrEnvironment env, CGenCodeHelper h, CInitializationOfParams Init)
+boolean :: MixinExistsInPrefix(int PrefixEnd, CMixinDeclaration target)
+void :: CheckIfBaseMixinsExist(CMethodEnvironment env)
+CType :: setPolyParamsFrom(CPolyApplicationValues vals)
--
NOTE: il constructor Ã¨ protected, bisogna usare un factory statica per
instanziare un oggetto di questa classe, quindi al posto di "new", dovremo
chiamare "CType.createCType(. . .)"</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1048</x>
      <y>172</y>
      <w>48</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>bg=#ffaaaa
Package::Compiler
CTypeError EXTENDS Error
{Class}
--
-STATIC int: LineNo
-STATIC String: ProgramFile
--
+String :: getName()
+String :: getCaption()
+CPolyApplicationValues :: getApplications(CMethodEnvironment env)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>617</x>
      <y>299</y>
      <w>44</w>
      <h>7</h>
    </coordinates>
    <panel_attributes>Package::mtj
IMagdaObjectElement
{Interface}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>518</x>
      <y>293</y>
      <w>72</w>
      <h>19</h>
    </coordinates>
    <panel_attributes>Package::mtj
CMagdaObject
{Class}
--
-IMagdaObjectElement[]: contents ! ARRAY 
-Object: internalPointer
-CMagdaMixinSequence: Class
--
+CMagdaProperty :: getStateHolderByName(String MixinName, int offsetInMixin)
+CMagdaProperty :: getStateHolder(CMagdaMixin mixin, int offsetInMixin)
+CMagdaObject :: executeMethodByName(String MixinName, int offsetInMixin, CMagdaObject[] params)
+CMagdaObject :: executeMethod(CMagdaMixin mixin, int offsetInMixin, CMagdaObject[] params)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>589</x>
      <y>301</y>
      <w>30</w>
      <h>3</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>280.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>553</x>
      <y>279</y>
      <w>37</w>
      <h>11</h>
    </coordinates>
    <panel_attributes>Package::mtj
CMagdaProperty
{Class}
--
-String: Name
-CMagdaObject: Value</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>589</x>
      <y>284</y>
      <w>30</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>280.0;180.0;80.0;180.0;80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>611</x>
      <y>279</y>
      <w>56</w>
      <h>9</h>
    </coordinates>
    <panel_attributes>Package::mtj
CMagdaMethod
{Interface}
--
+ABSTRACT CMagdaObject :: Execute(CMagdaObject aSelf, CMagdaObject[] params)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>638</x>
      <y>287</y>
      <w>3</w>
      <h>14</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>611</x>
      <y>258</y>
      <w>56</w>
      <h>9</h>
    </coordinates>
    <panel_attributes>Package::mtj
CMagdaMethodOverloaded
{Abstract Class}
--
-CMagdaMethod: SuperBody</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>638</x>
      <y>266</y>
      <w>3</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;130.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>510</x>
      <y>267</y>
      <w>80</w>
      <h>9</h>
    </coordinates>
    <panel_attributes>Package::mtj
CMagdaIniModule
{Abstract Class}
--
+ABSTRACT void :: Execute(CMagdaObject aSelf, CMagdaIniModules ModulesToExecute, CMagdaIniParams IniParams)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>589</x>
      <y>271</y>
      <w>30</w>
      <h>33</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>280.0;310.0;80.0;310.0;80.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>511</x>
      <y>233</y>
      <w>40</w>
      <h>8</h>
    </coordinates>
    <panel_attributes>bg=#aaffaa
Package::mtj
CMagdaIniModules :&lt;&gt;: &lt;CMagdaIniModule&gt;
{Class}
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>499</x>
      <y>213</y>
      <w>64</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>bg=#8888ff
Package::mtj
CMagdaIniParams :&lt;&gt;: &lt;String, CMagdaObject&gt;
{Class}
--
+String :: PairToString(String MixinName, String ParamName)
+CMagdaObject removeParamValue(String MixinName, String ParamName)
+CMagdaObject :: getParamValue(String MixinName, String ParamName, CMagdaObject value)
+void :: putParamValue(String MixinName, String ParamName, CMagdaObject value)
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>573</x>
      <y>195</y>
      <w>71</w>
      <h>14</h>
    </coordinates>
    <panel_attributes>Package::mtj
CMagdaMixin
{Abstract Class}
--
-String: name
-CMagdaIniModule[]: IniModules ! ARRAY
--
+ABSTRACT void :: setMethods(CMagdaMixinSequence AllSequence, IMagdaObjectElement[] aObjectBody)
+ABSTRACT int getObjectLayerSize()
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>587</x>
      <y>213</y>
      <w>45</w>
      <h>29</h>
    </coordinates>
    <panel_attributes>Package::mtj
CMagdaMixinSequence
{Class}
--
-ArrayList&lt;CMagdaMixin&gt;: arr
-STATIC CMagdaMixinSequence: globalList
--
+String :: getTypeName()
+void :: add(CMagdaMixin mix)
+CMagdaMixinSequence :: sum(CMagdaMixinSequence other)
+void :: addDistinct(CMagdaMixinSequence other)
+Object :: clone() THROWS CloneNotSupportedException
+int :: getObjectSize()
+CMagdaMixin :: getMixin(String name)
+int :: indexOfByName(String name)
+int :: getMixinOffsetByName(String name)
+int :: getMixinOffset(CMagdaMixin amixin)
+CMagdaObject :: CreateObject()
</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
