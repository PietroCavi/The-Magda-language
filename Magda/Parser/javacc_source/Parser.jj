options {
    DEBUG_PARSER = false; 
    STATIC=false;
}

PARSER_BEGIN(Parser)

    package Magda.Parser;

    import java.util.HashSet;

    import Magda.PreParser.*;
    import Magda.PreParser.PreParserStructures.*;
    import Magda.ProgramTree.LValues.*;
    import Magda.ProgramTree.Declarations.*;
    import Magda.ProgramTree.Instructions.*;
    import Magda.ProgramTree.MixinExpressions.*;
    import Magda.ProgramTree.Expressions.*;
    import Magda.ProgramTree.*;
    import Magda.Compiler.*;

    public class Parser {
        String FileName;
        static ProgramContext programContext;
      
        static Parser CreateParser( String FileName) throws java.io.FileNotFoundException{ 
            Parser res = new Parser ( new java.io.FileInputStream (FileName) );
            res.FileName = FileName;
            return res;
        }
      
        public static void main(String args[]) throws ParseException {
            try{
                programContext = PreParser.CreatePreParser(args[0]).prePars();
                System.out.println("/*\n\n" + programContext + "\n\n*/\n");
            }
            catch(Exception e){
                System.out.println(e);
                return;
            }           
 
            if(programContext == null){
                throw new Error ("Error while parsing the program context");
            }
            else if(programContext.checkForCycles() == true){
                throw new Error ("The program contains cyclical mixins");
            }
                     

            System.out.println("");
            System.out.println(" /* --------------------------------------------------------------------- */");
            System.out.println(" /*  ----- Launching magda compiler  ---- */");
            Parser parser=null;
            if (args.length >0) {
                try {
                    parser = CreateParser( args[0] );
                } 
                catch (java.io.FileNotFoundException e) { 
                    System.err.println("Brak pliku!");
                    e.printStackTrace();
                } 
            }
            else
                parser = new Parser(System.in);
        
            CProgram prg = parser.Program();
            System.out.println("/* --- Program successfully parsed and checked - Generating output ---*/");
            //prg.print(System.out);
            prg.CheckTypes();
            prg.GenCode(System.out, new CGenCodeHelper() );
        }

    }

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

/* ---------------- COMMENTS  ---------------- */

MORE :
{    
     "//" : IN_SINGLE_LINE_COMMENT
  |  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT> SPECIAL_TOKEN :
{ 
    <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT> SPECIAL_TOKEN :
{  
    <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_MULTI_LINE_COMMENT> MORE :
{
    < ~[] >
}

/* ---------------- MAIN TOKENS ----------------*/

TOKEN :
{
  <INCLUDE: "include"> 
| <LET: "let"> // ok
| <NULL: "null"> // ok
| <TRUE: "true"> // ok
| <FALSE: "false"> // ok
| <SUPER: "super"> // ok
| <VOID: "void"> // ok
| <THIS: "this"> // ok
| <BEGIN: "begin"> 
| <END: "end"> 
| <NEW: "new"> // ok
| <ABSTRACT: "abstract"> // ok 
| <OVERRIDE: "override"> // ok
| <REQUIRED: "required"> // ok
| <OPTIONAL: "optional"> // ok
| <INITIALIZES: "initializes"> // ok
| <IF: "if"> // ok
| <ELSE: "else"> // ok
| <WHILE: "while"> // ok
| <MIXIN: "mixin"> // ok
| <OF: "of"> // ok
| <WHERE: "where"> // ok
| <RETURN: "return"> // ok
| < NATIVEINSTRUCTION: "%" (~["%"] | ("\\%") )* "%" >
| < ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >
| < STRING_LITERAL: "\""    
     (   
         (~["\"","\\","\n","\r"]) | 
         ("\\" ( ["n","t","b","r","f","\\","'","\""] | 
         ["0"-"7"] ( ["0"-"7"] )? | 
         ["0"-"3"] ["0"-"7"] ["0"-"7"] ) )      
     )*      
    "\"" > 
| < BYTE_LITERAL: "0x"(["0"-"9","a"-"f","A"-"F"])+ >
| < INTEGER_LITERAL: (["0"-"9"])+ >
| < FLOAT_LITERAL: (["0"-"9"])+ "."(["0"-"9"])+ >

}


/* --------------------------------------------------*/
/* -------------- Here starts Magda Grammar ---------*/
/* --------------------------------------------------*/



/* ----------------- LValues -------------------------*/

ILValue FieldContext(String mixinname):
{ 
    Token t1, t2; 
}
{
    (
        LOOKAHEAD(6)
        <THIS> "." t1=<ID> "." t2= <ID>
        { 
            return new CFieldLValue(t1.image, t2.image); 
        }
 
        |

        <THIS> "." t1=<ID>
        {
        
            HashSet<String> controls = programContext.containsUnambiguousField(mixinname,t1.image);
            if(controls.size() > 1)
                throw new Error("Parse Error: <THIS> ambiguous field for mixin of type "+mixinname+"at line:"+t1.beginLine+", possible mixins with such method:"+controls);
            else if(controls.size() == 0)
                throw new Error("Parse Error: <THIS> No field named "+t1.image+" for mixin of type "+mixinname+" at line:"+t1.beginLine);

            String[] unambiguousMixin = controls.toArray(new String[0]);
            return new CFieldLValue(unambiguousMixin[0],t1.image);

        }
    )
}

ILValue Field():
{ 
    Token t1, t2; 
}
{
    <THIS> "." t1=<ID> "." t2= <ID>
    { return new CFieldLValue(t1.image, t2.image); } 
}

ILValue Variable():
{ 
    Token t1;
}
{ 
    t1=<ID>
    { return new CVariableLValue(t1.image); }
}

ILValue LValueContext(String mixinname):
{
    ILValue res;
}
{  
    ( 
        res = FieldContext(mixinname) |
        res = Variable()
    )
    
    {return res;}
}

ILValue LValue():
{
    ILValue res;
}
{  
    ( 
        res = Field() |
        res = Variable()
    )
    
    {return res;}
}

/* ----------------- Instructions -------------------------*/

CInstruction AssignmentContext(String mixinname,String methodname):
{ 
    IExpression expr;
    ILValue lval;
}
{ 
    lval = LValueContext(mixinname) ":=" expr = ExpressionContext(mixinname,methodname)
    {return new CAssignment(lval, expr);}
}

CInstruction Assignment():
{ 
    IExpression expr;
    ILValue lval;
}
{ 
    lval = LValue() ":=" expr = Expression()
    {return new CAssignment(lval, expr);}
}

CInstruction WhileLoopContext(String mixinname, String methodname):
{ 
    CInstructions instrs;
    IExpression expr;}
{ 
    <WHILE> "(" expr = ExpressionContext(mixinname,methodname) ")" instrs = InstructionsContext(mixinname,methodname) <END> 
    {return new CWhileLoopInstruction(expr, instrs); }
}

CInstruction WhileLoop():
{ 
    CInstructions instrs;
    IExpression expr;}
{ 
    <WHILE> "(" expr = Expression() ")" instrs = Instructions() <END> 
    {return new CWhileLoopInstruction(expr, instrs); }
}

CInstruction IfCondContext(String mixinname, String methodname):
{ 
    IExpression cond; 
    CInstructions trueInstr;
    CInstructions falseInstr=  new CInstructions();
}
{ 
    <IF> "(" cond= ExpressionContext(mixinname,methodname) ")"
    trueInstr = InstructionsContext(mixinname,methodname)
    [<ELSE>   falseInstr = InstructionsContext(mixinname,methodname) ]
    <END>
    { return new CIfCondInstruction(cond, trueInstr, falseInstr); }
}

CInstruction IfCond():
{ 
    IExpression cond; 
    CInstructions trueInstr;
    CInstructions falseInstr=  new CInstructions();
}
{ 
    <IF> "(" cond= Expression() ")"
    trueInstr = Instructions()
    [<ELSE>   falseInstr = Instructions() ]
    <END>
    { return new CIfCondInstruction(cond, trueInstr, falseInstr); }
}

CInstruction ReturnContext(String mixinname,String methodname):
{
    IExpression expr;
}
{ 
    <RETURN> expr=ExpressionContext(mixinname,methodname)
    {return new CReturnInstruction(expr);}
}

CInstruction Return():
{
    IExpression expr;
}
{ 
    <RETURN> expr=Expression()
    {return new CReturnInstruction(expr);}
}

CInstruction NativeInstruction():
{ 
    Token t;
}
{ 
    t = <NATIVEINSTRUCTION>
    { return new CNativeInstruction(t.image); } 
}

IInstruction InstructionContext(String mixinname, String methodname):
{ 
    CInstruction res; 
    IExpression tmp;
    Token delim;
}
{ 
    (   
        LOOKAHEAD(6) res = AssignmentContext(mixinname,methodname) | 
        LOOKAHEAD(2) tmp = ExpressionContext(mixinname,methodname) {res = new CExprInstruction(tmp);}|
        res = ReturnContext(mixinname,methodname) |
        res = NativeInstruction() |
        res = WhileLoopContext(mixinname,methodname) |
        res = IfCondContext(mixinname,methodname)
    )     
    delim = ";"
  
    { 
        res.PosInProgram = delim.beginLine;
        res.ProgramFile = FileName;
        return res; 
    }
}

IInstruction Instruction():
{ 
    CInstruction res; 
    IExpression tmp;
    Token delim;
}
{ 
    (   
        LOOKAHEAD(6) res = Assignment() | 
        LOOKAHEAD(2) tmp = Expression() {res = new CExprInstruction(tmp);}|
        res = Return() |
        res = NativeInstruction() |
        res = WhileLoop() |
        res = IfCond()
    )     
    delim = ";"
  
    { 
        res.PosInProgram = delim.beginLine;
        res.ProgramFile = FileName;
        return res; 
    }
}

CInstructions InstructionsContext(String mixinname, String methodname):
{ 
    CInstructions res= new CInstructions();
    IInstruction instr;
}
{ 
    ( LOOKAHEAD(2) instr = InstructionContext(mixinname, methodname) {res.add(instr);})*
    { return res; }
}

CInstructions Instructions():
{ 
    CInstructions res= new CInstructions();
    IInstruction instr;
}
{ 
    ( LOOKAHEAD(2) instr = Instruction() {res.add(instr);})*
    { return res; }
}

/* --------------------------- Expressions ------------------------------------- */

CExpressionList ActualParametersContext(String mixinname,String methodname):
{  
    CExpressionList res = new CExpressionList(); 
    IExpression t;
}
{ 
    "(" 
    
    [ 
        t=ExpressionContext (mixinname,methodname) {res.add(t);}
        ("," t=ExpressionContext(mixinname,methodname) {res.add(t);} )* 
    ]
          
    ")"
   
    {return res;}
}

CExpressionList ActualParameters():
{  
    CExpressionList res = new CExpressionList(); 
    IExpression t;
}
{ 
    "(" 
    
    [ 
        t=Expression () {res.add(t);}
        ("," t=Expression() {res.add(t);} )* 
    ]
          
    ")"
   
    {return res;}
}

IExpression SuperExpressionContext(String mixinname,String methodname):
{ 
    CExpressionList list;
}
{ 
    <SUPER> list = ActualParametersContext(mixinname,methodname) 
    { return new CSuperCallExpression(list);}
}

IExpression SuperExpression():
{ 
    CExpressionList list;
}
{ 
    <SUPER> list = ActualParameters() 
    { return new CSuperCallExpression(list);}
}

IExpression DirectMethodCall(String mixinname,String methodname,IExpression Target):
{
    Token MethodName;
    CExpressionList list;
}
{
        "." MethodName = <ID> list = ActualParametersContext(mixinname,methodname)
        {
            
            HashSet<String> controls = programContext.containsUnambiguousMethod(Target.GetTypeString(),MethodName.image);
            if(controls.size() > 1)
                throw new Error("ambiguous method for mixin of type "+Target.GetTypeString()+" "+controls);
            else if(controls.size() == 0)
                throw new Error("No method named "+MethodName.image+" for mixin of type "+Target.GetTypeString());

            String[] unambiguousMixin = controls.toArray(new String[0]);

            return new CMethodCallExpression(Target, unambiguousMixin[0], MethodName.image, list,programContext.getMethodReturnType(unambiguousMixin[0],MethodName.image));
        }

}

IExpression SpecificMethodCallOrSelectAndCall(String mixinname,String methodname,IExpression Target):
{
    Token FirstPart,MethodName;
    CExpressionList list;
    IExpression secondTarget;
}
{
        "." FirstPart = <ID> "." MethodName = <ID> list = ActualParametersContext(mixinname,methodname) 
        { 
            if(programContext.containsMixin(FirstPart.image)){
                String typeString = programContext.getMethodReturnType(FirstPart.image,MethodName.image);
                return new CMethodCallExpression(Target, FirstPart.image, MethodName.image, list,typeString);
            }
            
            HashSet<String> controls = programContext.containsUnambiguousField(Target.GetTypeString(),FirstPart.image);
            if(controls.size() > 1)
                throw new Error("ambiguous field for mixin of type "+Target.GetTypeString()+" "+controls);
            else if(controls.size() == 0)
                throw new Error("No field named "+FirstPart.image+" for mixin of type "+Target.GetTypeString());
            else{
                String[] unambiguousMixin = controls.toArray(new String[0]);
                secondTarget = new CFieldSelectExpression(Target, unambiguousMixin[0], FirstPart.image, programContext.getFieldType(unambiguousMixin[0],FirstPart.image));


                controls = programContext.containsUnambiguousMethod(secondTarget.GetTypeString(),MethodName.image);
                if(controls.size() > 1)
                    throw new Error("ambiguous method for mixin of type "+Target.GetTypeString()+" "+controls);
                else if(controls.size() == 0)
                    throw new Error("No method named "+MethodName.image+" for mixin of type "+secondTarget.GetTypeString());
                           

                unambiguousMixin = controls.toArray(new String[0]);

                return new CMethodCallExpression(secondTarget, unambiguousMixin[0], MethodName.image, list,programContext.getMethodReturnType(unambiguousMixin[0],MethodName.image));
            }

        } 
}

IExpression SpecificSelectOrMethodCall(String mixinname,String methodname,IExpression Target):
{
    Token FirstPart,SecondPart,MethodName;
    CExpressionList list;
    IExpression secondTarget;
    
}
{
    "." FirstPart = <ID> "." SecondPart = <ID> "." MethodName = <ID> list = ActualParametersContext(mixinname,methodname)
    {
        if(programContext.containsMixin(FirstPart.image)){ //Specific Selection
            String typeString = programContext.getFieldType(FirstPart.image,SecondPart.image);
            secondTarget =  new CFieldSelectExpression(Target, FirstPart.image, SecondPart.image, typeString);
            
            HashSet<String> controls = programContext.containsUnambiguousMethod(secondTarget.GetTypeString(),MethodName.image);
            if(controls.size() > 1)
                throw new Error("ambiguous method for mixin of type "+Target.GetTypeString()+" "+controls);
            else if(controls.size() == 0)
                throw new Error("No method named "+MethodName.image+" for mixin of type "+secondTarget.GetTypeString());
                       
            String[] unambiguousMixin = controls.toArray(new String[0]);

            return new CMethodCallExpression(secondTarget, unambiguousMixin[0], MethodName.image, list,programContext.getMethodReturnType(unambiguousMixin[0],MethodName.image));

            

        }
        else{ //Specific methodCall
            
            HashSet<String> controls = programContext.containsUnambiguousField(Target.GetTypeString(),FirstPart.image);
            if(controls.size() > 1)
                throw new Error("ambiguous field for mixin of type "+Target.GetTypeString()+" "+controls);
            else if(controls.size() == 0)
                throw new Error("No field named "+FirstPart.image+" for mixin of type "+Target.GetTypeString());
            else{
                String[] unambiguousMixin = controls.toArray(new String[0]);
                secondTarget = new CFieldSelectExpression(Target, unambiguousMixin[0], FirstPart.image, programContext.getFieldType(unambiguousMixin[0],FirstPart.image));
                
                return new CMethodCallExpression(secondTarget,SecondPart.image,MethodName.image,list,programContext.getMethodReturnType(SecondPart.image,MethodName.image));
            }
        }        

        return null;
    }
}

IExpression SpecificSelectAndMethodCall(String mixinname,String methodname,IExpression Target):
{
    Token MixinName1,MixinName2,MethodName,FieldName;
    CExpressionList list;
    IExpression secondTarget;
}
{
    "." MixinName1 = <ID> "." FieldName = <ID> "." MixinName2 = <ID> "." MethodName = <ID> list = ActualParametersContext(mixinname,methodname)
    {
        
        String typeString = programContext.getFieldType(MixinName1.image,FieldName.image);
        secondTarget = new CFieldSelectExpression(Target, MixinName1.image, FieldName.image, typeString);
            
        typeString = programContext.getMethodReturnType(MixinName2.image,MethodName.image);
        return new CMethodCallExpression(secondTarget, MixinName2.image, MethodName.image, list,typeString);
        
        return null;
    }
}

IExpression DirectSelect(String mixinname,String methodname,IExpression Target):
{
    Token FieldName;
}
{
    "." FieldName = <ID>
    {

        HashSet<String> controls = programContext.containsUnambiguousField(Target.GetTypeString(),FieldName.image);
        if(controls.size() > 1)
            throw new Error("ambiguous field for mixin of type "+Target.GetTypeString()+" "+controls);
        else if(controls.size() == 0)
            throw new Error("No field named "+FieldName.image+" for mixin of type "+Target.GetTypeString());

        String[] unambiguousMixin = controls.toArray(new String[0]);
        return new CFieldSelectExpression(Target,unambiguousMixin[0],FieldName.image,programContext.getFieldType(unambiguousMixin[0],FieldName.image));
    }
}

IExpression SpecificSelect(String mixinname,String methodname,IExpression Target):
{
    Token MixinName,FieldName;
}
{
    "." MixinName = <ID> "." FieldName = <ID>
    {
        String typeString = programContext.getFieldType(MixinName.image,FieldName.image);
        return new CFieldSelectExpression(Target, MixinName.image, FieldName.image, typeString);
    }
}

///////

IExpression MethodCallSuffixContext (String mixinname,String methodname,IExpression Target):
{ 
    Token MethodMixin, MethodName; 
    CExpressionList list;
}
{  
    (
        LOOKAHEAD(4)

        "." MethodMixin = <ID> "." MethodName = <ID> list = ActualParametersContext(mixinname,methodname) 
        { 
            String typeString = programContext.getMethodReturnType(MethodMixin.image,MethodName.image);
            return new CMethodCallExpression(Target, MethodMixin.image, MethodName.image, list,typeString);
        } 
        
        |
        
        "." MethodName = <ID> list = ActualParametersContext(mixinname,methodname)
        {
            
            HashSet<String> controls = programContext.containsUnambiguousMethod(Target.GetTypeString(),MethodName.image);
            if(controls.size() > 1)
                throw new Error("ambiguous method for mixin of type "+Target.GetTypeString()+" "+controls);
            else if(controls.size() == 0)
                return new CMethodCallExpression(Target, Target.GetTypeString(), MethodName.image, list);
                       

            String[] unambiguousMixin = controls.toArray(new String[0]);

            return new CMethodCallExpression(Target, unambiguousMixin[0], MethodName.image, list,programContext.getMethodReturnType(unambiguousMixin[0],MethodName.image));
        }
    )

    //{
    //    return ret;
    //}
}

///////

IExpression MethodCallSuffix (IExpression Target):
{ 
    Token MethodMixin, MethodName; 
    CExpressionList list;
}
{  
    "." MethodMixin = <ID> "." MethodName = <ID> list = ActualParameters() 
    { 
        return new CMethodCallExpression(Target, MethodMixin.image, MethodName.image, list);
    }
    
}

Token nextTokenAfterDot():
{
    Token ret;
}
{
    "." ret = <ID>
    {
        return ret;
    }
}

IExpression FieldSelectSuffixContext(String mixinname,IExpression Target):
{ 
    Token FieldName, FirstPart; 
}
{
     
        /*
        "." MixinName= <ID> "." FieldName = <ID> 
        { 
            String typeString = programContext.getFieldType(MixinName.image,FieldName.image);
            return new CFieldSelectExpression(Target, MixinName.image, FieldName.image, typeString);
        }

        |
        */
        "." FirstPart = <ID>
        {

            if(programContext.containsMixin(FirstPart.image)){
                FieldName = nextTokenAfterDot();
                
                String typeString = programContext.getFieldType(FirstPart.image,FieldName.image);
                return new CFieldSelectExpression(Target, FirstPart.image, FieldName.image, typeString);
            
            }

            HashSet<String> controls = programContext.containsUnambiguousField(Target.GetTypeString(),FirstPart.image);
            if(controls.size() > 1)
                throw new Error("ambiguous field for mixin of type "+Target.GetTypeString()+" "+controls);
            else if(controls.size() == 0)
                return new CFieldSelectExpression(Target, Target.GetTypeString(), FirstPart.image);

            String[] unambiguousMixin = controls.toArray(new String[0]);
            return new CFieldSelectExpression(Target, unambiguousMixin[0], FirstPart.image, programContext.getFieldType(unambiguousMixin[0],FirstPart.image));
            
        }
    
}

IExpression FieldSelectSuffix(IExpression Target):
{ 
    Token MixinName, FieldName; 
}
{ 
    "." MixinName= <ID> "." FieldName = <ID> 
    { 
        String typeString = programContext.getFieldType(MixinName.image,FieldName.image);
        return new CFieldSelectExpression(Target, MixinName.image, FieldName.image, typeString);
    }
}

IExpression BaseExpressionContext(String mixinname, String methodname):
{ 
    IExpression res; 
    Token t;
}
{ 
    (
        <THIS> {res = new CThisExpression(mixinname);}|                                                                          // Mah, in teoria easy
        res = SuperExpressionContext(mixinname,methodname) |                                                                     // Gesù
        <TRUE> {res = new CBooleanLiteral(true);} |                                                                              // OK
        <FALSE> {res = new CBooleanLiteral(false);} |                                                                            // OK
        t = <BYTE_LITERAL> { res = new CByteLiteral(Byte.parseByte(t.image.substring(2), 16));} |                                // OK
        t = <INTEGER_LITERAL> { res = new CIntegerLiteral(Integer.parseInt(t.image));} |                                         // OK
        t = <FLOAT_LITERAL> { res = new CFloatLiteral(Float.parseFloat(t.image));} |                                             // OK
        t = <STRING_LITERAL>  { res = new CStringLiteral (t.image);}  |                                                          // OK
        <NULL> { res = new CNullExpression();}|                                                                                  // Cambiare il tipo
        t = <ID> {res = new CIdentifierExpression(t.image,programContext.getMethodVariableType(mixinname,methodname,t.image));}| // DONE
        "(" res= ExpressionContext(mixinname,methodname) ")" |                                                                   // OK
        res = ObjectCreationContext(mixinname,methodname)                                                                        // Cambiare il tipo
    )  
    
    ( 
        LOOKAHEAD(9) 
        res = SpecificSelectAndMethodCall(mixinname,methodname,res) |
        LOOKAHEAD(7) 
        res = SpecificSelectOrMethodCall(mixinname,methodname,res) |
        LOOKAHEAD(5) 
        res = SpecificMethodCallOrSelectAndCall(mixinname,methodname,res) |
        LOOKAHEAD(4) 
        res = SpecificSelect(mixinname,methodname,res) |
        LOOKAHEAD(3) 
        res = DirectMethodCall(mixinname,methodname,res) |
        LOOKAHEAD(2) 
        res = DirectSelect(mixinname,methodname,res)
        //res = MethodCallSuffixContext (mixinname,methodname,res) |                                                               // Neanche troppoGesù
        //res = FieldSelectSuffixContext(mixinname,res)                                                                            // In teoria easy (?)
    )*
  
    { 
        return res;
    }
}

IExpression BaseExpression():
{ 
    IExpression res; 
    Token t;
}
{ 
    (
        <THIS> {res = new CThisExpression();}|
        res = SuperExpression()|
        <TRUE> {res = new CBooleanLiteral(true);} |
        <FALSE> {res = new CBooleanLiteral(false);} |
        t = <BYTE_LITERAL> { res = new CByteLiteral(Byte.parseByte(t.image.substring(2), 16));} |
        t = <INTEGER_LITERAL> { res = new CIntegerLiteral(Integer.parseInt(t.image));} |
        t = <FLOAT_LITERAL> { res = new CFloatLiteral(Float.parseFloat(t.image));} |
        t = <STRING_LITERAL>  { res = new CStringLiteral (t.image);}  |
        <NULL> { res = new CNullExpression();}|
        t = <ID> {res = new CIdentifierExpression(t.image);}|
        "(" res= Expression() ")" |
        res = ObjectCreation() 
    )  
    
    ( 
        LOOKAHEAD(6) 
        res = MethodCallSuffix (res)|
        res = FieldSelectSuffix (res)
    )*
  
    { return res;}
}

IExpression BinaryOperatorSuffixContext(String mixinname,String methodname,IExpression left):
{ 
    IExpression right;
}
{ 
    "+" right = BaseExpressionContext(mixinname,methodname) {
        return new CBinaryExpressionAdd (left, right);
	} 
    
    |
  
    "-" right = BaseExpressionContext(mixinname,methodname) {
		return new CBinaryExpressionSub (left, right);
    } 
    
    |
  
    "/" right = BaseExpressionContext(mixinname,methodname) {
		return new CBinaryExpressionDivide (left, right);
    } 

    |
  
    "*" right = BaseExpressionContext(mixinname,methodname) {
		return new CBinaryExpressionMultiply (left, right);
    } 
    
    |

    "==" right = BaseExpressionContext(mixinname,methodname) {
        return new CBinaryExpressionStrongEqual (left, right);
    } 

    |

    "=" right = BaseExpressionContext(mixinname,methodname) {
        return new CBinaryExpressionEqual (left, right);
    } 

    |
  
    "<=" right = BaseExpressionContext(mixinname,methodname) {
        return new CBinaryExpressionLeq (left, right);
    } 
    
    |
  
    "<" right = BaseExpressionContext(mixinname,methodname) {
        return new CBinaryExpressionLess (left, right);
    } 

    |

    ">=" right = BaseExpressionContext(mixinname,methodname) {
        return new CBinaryExpressionLeq (right, left);
    } 
    
    |
  
    ">" right = BaseExpressionContext(mixinname,methodname) {
        return new CBinaryExpressionLess (right, left);
    } 

    |

    "!=" right = BaseExpressionContext(mixinname,methodname) {
        return new CBinaryExpressionNeq (right, left);
    }
 
}


IExpression BinaryOperatorSuffix(IExpression left):
{ 
    IExpression right;
}
{ 
    "+" right = BaseExpression() {
	    return new CBinaryExpressionAdd (left, right);
	} 
    
    |
  
    "-" right = BaseExpression() {
		return new CBinaryExpressionSub (left, right);
    } 
    
    |
  
    "/" right = BaseExpression() {
		return new CBinaryExpressionDivide (left, right);
    } 

    |
  
    "*" right = BaseExpression() {
		return new CBinaryExpressionMultiply (left, right);
    } 
    
    |

    "==" right = BaseExpression() {
        return new CBinaryExpressionStrongEqual (left, right);
    } 

    |

    "=" right = BaseExpression() {
        return new CBinaryExpressionEqual (left, right);
    } 

    |
  
    "<=" right = BaseExpression() {
        return new CBinaryExpressionLeq (left, right);
    } 
    
    |
  
    "<" right = BaseExpression() {
        return new CBinaryExpressionLess (left, right);
    } 

    |

    ">=" right = BaseExpression() {
        return new CBinaryExpressionLeq (right, left);
    } 
    
    |
  
    ">" right = BaseExpression() {
        return new CBinaryExpressionLess (right, left);
    } 

    |

    "!=" right = BaseExpression() {
        return new CBinaryExpressionNeq (right, left);
    }
 
}

/* 

In caso di ObjectCreation potrei prendere un branch diverso che non prende neanche in considerazione la versione abbreviata dell'invocazione
di manipolazione di field e metodi in forma abbreviata, e non mi permetta neanche di applicare somme nel caso in cui ci fosse la creazione di un
oggetto, a quel punto probabilmente dovrei effettuare anche un controllo in caso di lettura di un ObjectCreation nel caso di un ramo right di una
operazione binaria!

*/
IExpression ExpressionContext(String mixinname, String methodname):
{ 
    IExpression res;
}
{ 
    res = BaseExpressionContext(mixinname,methodname)
    ( 
        res=BinaryOperatorSuffixContext(mixinname,methodname,res)
    )*
    {return res; }
}

IExpression Expression():
{ 
    IExpression res;
}
{ 
    res = BaseExpression()
    ( 
        res=BinaryOperatorSuffix(res)
    )*
    {return res; }
}

CInitializationOfParam ActualInitializationOfOneParamContext(String mixinname,String methodname):
{ 
    Token MixinName, ParName; 
    IExpression expr; 
}
{ 
    MixinName= <ID> "." ParName= <ID> ":=" expr =ExpressionContext(mixinname,methodname)
    {return new CInitializationOfParam(MixinName.image, ParName.image, expr);}
}

CInitializationOfParam ActualInitializationOfOneParam():
{ 
    Token MixinName, ParName; 
    IExpression expr; 
}
{ 
    MixinName= <ID> "." ParName= <ID> ":=" expr =Expression()
    {return new CInitializationOfParam(MixinName.image, ParName.image, expr);}
}

CInitializationOfParams ActualInitializationOfParamsContext(String mixinname, String methodname):
{ 
    CInitializationOfParams res = new CInitializationOfParams();
    CInitializationOfParam tmp;
}
{  
    [
        tmp = ActualInitializationOfOneParamContext(mixinname,methodname) 
        { res.add (tmp);}
        (
            "," tmp = ActualInitializationOfOneParamContext(mixinname,methodname) 
            {res.add(tmp);}
        )*
    ] 
   
    { return res;}
}

CInitializationOfParams ActualInitializationOfParams():
{ 
    CInitializationOfParams res = new CInitializationOfParams();
    CInitializationOfParam tmp;
}
{  
    [
        tmp = ActualInitializationOfOneParam() 
        { res.add (tmp);}
        (
            "," tmp = ActualInitializationOfOneParam() 
            {res.add(tmp);}
        )*
    ] 
   
    { return res;}
}

IExpression ObjectCreationContext(String mixinname,String methodname):
{ 
    IMixinExpression expr; 
    CInitializationOfParams initialization;
}
{ 
    <NEW> expr = MixinExpression() "[" initialization = ActualInitializationOfParamsContext(mixinname,methodname) "]"
    { 
        return new CObjectCreation(expr, initialization); }
}

IExpression ObjectCreation():
{ 
    IMixinExpression expr; 
    CInitializationOfParams initialization;
}
{ 
    <NEW> expr = MixinExpression() "[" initialization = ActualInitializationOfParams() "]"
    { return new CObjectCreation(expr, initialization); }
}

/* --------------------------- GLOBAL DECLARATIONS ------------------------------------- */

IDeclaration Declaration():
{ 
    IDeclaration res;
}
{ 
    ( 
        res =MixinDeclaration() |
        res =LetDeclaration()
    ) ";"
  
    {return res;}
}


IMixinExpression MixinExpressionOrVoid():
{ 
    IMixinExpression res; 
}
{  
    <VOID> { return new CMixinExpressionVoid(); }
   
    |

    res = MixinExpression() {return res; }
   
}


IMixinExpression MixinExpressionHOApplication():
{ 
    Token t1, t2;
    IMixinExpression value;
}
{ 
    <WHERE> t1=<ID> "." t2=<ID> ":=" "(" value= MixinExpression() ")"
    {return new CMixinExpressionApplication(t1.image, t2.image, value);}
}

IMixinExpression MixinExpressionID():
{ 
    Token Name;
}
{  
    Name=<ID> {return new CMixinExpressionIdentifier( Name.image);}
}

IMixinExpression MixinExpression():
{ 
    IMixinExpression res, temp; 
}
{ 
    "(" res = MixinExpression() ")" 

    |

    res = MixinExpressionID()
  
    (","  
        ( 
            temp = MixinExpressionID()   | 
            temp  = MixinExpressionHOApplication() |
            "(" temp = MixinExpression() ")" 
        )      
        { res = new CMixinExpressionConcatenation(res, temp); }
    )*
  
    { return res;}
} 

/*  ---------------- CLASS MEMBERS ---------------- */

CFieldDeclaration FieldDeclaration():
{ 
    Token name;
    IMixinExpression Type;
}
{ 
    name =<ID> ":" Type = MixinExpression() 
    {return new CFieldDeclaration(name.image, Type);} 
}

CSourceInitializationParameter InputInitializationParameter(String MixinName):
{ 
    Token ParamName; 
    IMixinExpression Type;
}
{ 
    ParamName =<ID> ":" Type = MixinExpression()
    { return new CSourceInitializationParameter(  MixinName, ParamName.image, Type ); }
}

CSourceInitializationParameters  InputInitializationParameters(String MixinName):
{ 
    CSourceInitializationParameter par;
    CSourceInitializationParameters list = new CSourceInitializationParameters();
}
{ 
    "(" 
    [ par = InputInitializationParameter(MixinName) { list.add (par); }
        (";" par = InputInitializationParameter(MixinName) { list.add (par); }
        )* 
    ]
    ")"
    { return list; }
}

CSourceInitializationParameter OutputInitializationParameter():
{ 
    Token MixinName, ParamName; 
}
{ 
    MixinName =<ID> "." ParamName =<ID>
    { return new CSourceInitializationParameter(  MixinName.image, ParamName.image, null ); }
}


CSourceInitializationParameters  OutputInitializationParameters():
{ 
    CSourceInitializationParameter par;
    CSourceInitializationParameters list = new CSourceInitializationParameters();
}
{ 
    "(" 
        [ par = OutputInitializationParameter() { list.add (par); }
            ("," par = OutputInitializationParameter() { list.add (par); }
            )*
        ]
    ")"
    { return list; }
}




CParameterDeclaration ParameterDecl():
{ 
    Token Name; IMixinExpression Type; 
}
{ 
    Name = <ID> ":" Type =MixinExpression()
    { return new CParameterDeclaration(Name.image, Type); }
}


CParameterDeclarations ParametersDecl():
{  
    CParameterDeclarations res = new CParameterDeclarations(); 
    CParameterDeclaration decl; 
}
{ 
    "(" 
        [ decl = ParameterDecl() 
            { res.add(decl); }
            (";" decl = ParameterDecl()
                { res.add(decl); }
            )*
        ]
    ")"
    {return res;}
}



CVariableDeclarations localVariablesDeclaration():
{ 
    Token Name;
    IMixinExpression type;
    CVariableDeclarations res = new CVariableDeclarations();
}
{ 
    ( 
        Name = <ID> ":" type= MixinExpression() ";"
        { res.add ( new CVariableDeclaration (Name.image, type) ); }
    )*
    { return res;}
}

CIniModuleSuperInstruction ModuleSuperCall():
{ 
    CInitializationOfParams params;
}
{ 
    <SUPER> "[" params=ActualInitializationOfParams() "]" ";" {return new CIniModuleSuperInstruction(params);}
}

CIniModuleBody IniModuleBody(String mixinname,String methodname):
{ 
    CVariableDeclarations vars;
    CInstructions instrs, instrs2;
    CInstruction instr;
}
{ 
    ( 
        vars = localVariablesDeclaration() 
    )
  
    <BEGIN>
        instrs  = InstructionsContext(mixinname,methodname)
        instr   = ModuleSuperCall()
        instrs2 = InstructionsContext(mixinname,methodname)
    <END>
    
    { 
        instrs.add(instr);
        instrs.addAll( instrs2 );
        return new CIniModuleBody (vars, instrs);
    }
}


CIniModuleDeclaration IniModuleDeclaration(String mixinname):
{ 
    Token MixinName;
    CSourceInitializationParameters input, output;
    CIniModuleBody Body;

    String methodname; 
 
    int LineNo = getToken(1).beginLine;
    boolean isRequired;
}
{ 
    ( <REQUIRED> {isRequired=true;} | <OPTIONAL> {isRequired=false;} ) MixinName = <ID> 
    input = InputInitializationParameters(MixinName.image){methodname = programContext.getIniModuleName(mixinname,input.getParamNames());}<INITIALIZES> 
    output = OutputInitializationParameters()

    Body = IniModuleBody(mixinname,methodname)

    { return new CIniModuleDeclaration(isRequired, MixinName.image, input, output, Body, LineNo, FileName);}
 
}


/* --------------------------- METHOD DECLARATIONS ------------------------------------- */

CMethodBody MethodBody(String mixinname, String methodname):
{ 
    CVariableDeclarations vars;
    CInstructions instrs;}
{ 
    ( vars = localVariablesDeclaration() )
    <BEGIN>
        instrs = InstructionsContext(mixinname,methodname)
    <END>
    { return new CMethodBody (vars, instrs);}
}

INewMethodDeclaration NewMethodDeclaration(String mixinname):
{ 
    IMixinExpression ResType; 
    Token name; 
    CMethodBody body;
    CParameterDeclarations pars;
    int linePos = getToken(1).beginLine;
}
{  
    ( 
        <ABSTRACT> ResType= MixinExpressionOrVoid() name = <ID> pars=ParametersDecl() 
        {return CAbstractMethodDeclaration.createCAbstractMethodDeclaration(ResType, name.image, pars, linePos, FileName); }
        
        |

        <NEW> ResType= MixinExpressionOrVoid() name=<ID> pars= ParametersDecl() body= MethodBody(mixinname, name.image) 
        {return  CNewMethodDeclaration.createCNewMethodDeclaration(ResType, name.image, pars, body, linePos, FileName); }
    )
}

COverrideMethodDeclaration OverrideMethodDeclaration(String mixinname):
{ 
    IMixinExpression ResType; 
    Token Mixinname, name; 
    CMethodBody body;
    CParameterDeclarations pars;
    int LineNo = getToken(1).beginLine;
}
{ 
    <OVERRIDE> ResType=MixinExpressionOrVoid() Mixinname= <ID> "." name=<ID>  pars=ParametersDecl()  body= MethodBody(mixinname,Mixinname.image+"."+name.image) 
    {return COverrideMethodDeclaration.createCOverrideMethodDeclaration(ResType, Mixinname.image, name.image, pars, body, LineNo, FileName); }
  
}

CPolymorphismParam PolymorphismParam():
{ 
    Token t1;
    IMixinExpression expr;
}
{  
    t1= <ID> "<=" expr = MixinExpression()
    {return new CPolymorphismParam(t1.image, expr);}
}

CPolymorphismParams PolymorphismParams():
{ 
    CPolymorphismParams res = new CPolymorphismParams();
    CPolymorphismParam par;
}
{ 
    par = PolymorphismParam()  {res.add(par); }
    (";" par = PolymorphismParam() {res.add(par);} )*
    {return res;}
}


IDeclaration MixinDeclaration():
{  
    IMixinExpression expr; 
    Token mixinname;
    
    CFieldDeclaration fld;
    COverrideMethodDeclaration mtd;
    INewMethodDeclaration newmtd;
    CParameterDeclaration paramDecl;
    CIniModuleDeclaration iniModule;

    CFieldDeclarations flds = new CFieldDeclarations();
    CMethodDeclarations mtds = new CMethodDeclarations();
    CNewMethodDeclarations newmtds = new CNewMethodDeclarations();
    CParameterDeclarations paramDecls = new CParameterDeclarations();
    CPolymorphismParams polyPars =  new CPolymorphismParams();
    CIniModuleDeclarations iniModules = new CIniModuleDeclarations();
}
{ 
    <MIXIN> mixinname= <ID> ["<" polyPars = PolymorphismParams() ">"] <OF>  expr = MixinExpressionOrVoid()  "="
        ( 
            ( 
                iniModule = IniModuleDeclaration(mixinname.image) {iniModules.add(iniModule);}
                
                |                

                fld = FieldDeclaration() {flds.add(fld);}
                
                |

                mtd = OverrideMethodDeclaration(mixinname.image) {mtds.add(mtd);}
          
                |
        
                newmtd = NewMethodDeclaration(mixinname.image) {newmtds.add(newmtd);}
           
           ) ";"
        ) *
    <END> 
    
    { return CMixinDeclaration.createCMixinDeclaration(mixinname.image, expr, flds, newmtds, mtds, iniModules, polyPars); }
}

/* ---------------------  ANOTHER global declarations -------- */

CLetDeclaration LetDeclaration():
{ 
    Token name;
    IMixinExpression expr;
}
{ 
    <LET> name = <ID> "=" expr = MixinExpression() 
    {return new CLetDeclaration( name.image, expr);}
}

CGlobalDeclarations IncludedDeclarations():
{ 
    Token t;
    String fname=" --unknown--";
}
{ 
    <INCLUDE> t=<STRING_LITERAL>";"
    { 
        try{ 
            fname=t.image.substring(1,t.image.length()-1);
            return CreateParser( fname ).GlobalDeclarations();
        } 
        catch (Exception exc){ 
            throw new Error ("Error in file "+fname+ ":"+exc.toString());
        };
    }
}

CGlobalDeclarations GlobalDeclarations():
{ 
    CGlobalDeclarations result = new CGlobalDeclarations();
    CGlobalDeclarations decls = null;
    IDeclaration decl;
}
{ 
    ( 
        decl= Declaration() {result.add(decl);} |
        decls = IncludedDeclarations() {result.addAll(decls);}
    ) *
  
    { return result;}
}

CProgram Program():
{ 
    CGlobalDeclarations decls ;
    CInstructions instrs;
}
{   
    decls = GlobalDeclarations()
    instrs= Instructions() <EOF>
    {return new CProgram(decls, instrs);}
}
