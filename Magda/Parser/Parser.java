/* Generated By:JavaCC: Do not edit this line. Parser.java */
package Magda.Parser;

import Magda.ProgramTree.LValues.*;
import Magda.ProgramTree.Declarations.*;
import Magda.ProgramTree.Instructions.*;
import Magda.ProgramTree.MixinExpressions.*;
import Magda.ProgramTree.Expressions.*;
import Magda.ProgramTree.*;
import Magda.Compiler.*;

public class Parser implements ParserConstants {
  String FileName;

  static Parser CreateParser( String FileName) throws java.io.FileNotFoundException
  { Parser res = new Parser ( new java.io.FileInputStream (FileName) );
    res.FileName = FileName;
    return res;
  }

  public static void main(String args[]) throws ParseException {
    System.out.println("");
    System.out.println(" /* --------------------------------------------------------------------- */");
    System.out.println(" /*  ----- Launching magda compiler  ---- */");
    Parser parser=null;
    if (args.length >0) {
      try {
      parser = CreateParser( args[0] );
      } catch (java.io.FileNotFoundException e)
      { System.err.println("Brak pliku!");
        e.printStackTrace();
      }
    }else
      parser = new Parser(System.in);
    CProgram prg = parser.Program();
    System.out.println("/* --- Program successfully parsed and checked - Generating output ---*/");
    //prg.print(System.out);
    prg.CheckTypes();
    prg.GenCode(System.out, new CGenCodeHelper() );
  }

/* --------------------------------------------------*/
/* -------------- Here starts Magda Grammar ---------*/
/* --------------------------------------------------*/



/* ----------------- LValues -------------------------*/
  final public ILValue Field() throws ParseException {
  Token t1, t2;
    jj_consume_token(THIS);
    jj_consume_token(39);
    t1 = jj_consume_token(ID);
    jj_consume_token(39);
    t2 = jj_consume_token(ID);
    {if (true) return new CFieldLValue(t1.image, t2.image);}
    throw new Error("Missing return statement in function");
  }

  final public ILValue Variable() throws ParseException {
  Token t1;
    t1 = jj_consume_token(ID);
   {if (true) return new CVariableLValue(t1.image);}
    throw new Error("Missing return statement in function");
  }

  final public ILValue LValue() throws ParseException {
 ILValue res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      res = Field();
      break;
    case ID:
      res = Variable();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

/* ----------------- Instructions -------------------------*/
  final public CInstruction Assignment() throws ParseException {
  IExpression expr;
  ILValue lval;
    lval = LValue();
    jj_consume_token(40);
    expr = Expression();
   {if (true) return new CAssignment(lval, expr);}
    throw new Error("Missing return statement in function");
  }

  final public CInstruction WhileLoop() throws ParseException {
  CInstructions instrs;
  IExpression expr;
    jj_consume_token(WHILE);
    jj_consume_token(41);
    expr = Expression();
    jj_consume_token(42);
    instrs = Instructions();
    jj_consume_token(END);
   {if (true) return new CWhileLoopInstruction(expr, instrs);}
    throw new Error("Missing return statement in function");
  }

  final public CInstruction IfCond() throws ParseException {
  IExpression cond;
  CInstructions trueInstr;
  CInstructions falseInstr=  new CInstructions();
    jj_consume_token(IF);
    jj_consume_token(41);
    cond = Expression();
    jj_consume_token(42);
    trueInstr = Instructions();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      falseInstr = Instructions();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(END);
    {if (true) return new CIfCondInstruction(cond, trueInstr, falseInstr);}
    throw new Error("Missing return statement in function");
  }

  final public CInstruction Return() throws ParseException {
 IExpression expr;
    jj_consume_token(RETURN);
    expr = Expression();
   {if (true) return new CReturnInstruction(expr);}
    throw new Error("Missing return statement in function");
  }

  final public CInstruction NativeInstruction() throws ParseException {
  Token t;
    t = jj_consume_token(NATIVEINSTRUCTION);
    {if (true) return new CNativeInstruction(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public IInstruction Instruction() throws ParseException {
  CInstruction res;
  IExpression tmp;
  Token delim;
    if (jj_2_1(6)) {
      res = Assignment();
    } else if (jj_2_2(2)) {
      tmp = Expression();
                                     res = new CExprInstruction(tmp);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
        res = Return();
        break;
      case NATIVEINSTRUCTION:
        res = NativeInstruction();
        break;
      case WHILE:
        res = WhileLoop();
        break;
      case IF:
        res = IfCond();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    delim = jj_consume_token(43);
    res.PosInProgram = delim.beginLine;
    res.ProgramFile = FileName;
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public CInstructions Instructions() throws ParseException {
  CInstructions res= new CInstructions();
  IInstruction instr;
    label_1:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_1;
      }
      instr = Instruction();
                                        res.add(instr);
    }
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

/* --------------------------- Expressions ------------------------------------- */
  final public CExpressionList ActualParameters() throws ParseException {
   CExpressionList res = new CExpressionList();
   IExpression t;
    jj_consume_token(41);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
    case TRUE:
    case FALSE:
    case SUPER:
    case THIS:
    case NEW:
    case ID:
    case STRING_LITERAL:
    case BYTE_LITERAL:
    case INTEGER_LITERAL:
    case FLOAT_LITERAL:
    case 41:
      t = Expression();
                           res.add(t);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 44:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(44);
        t = Expression();
                                res.add(t);
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(42);
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public IExpression SuperExpression() throws ParseException {
  CExpressionList list;
    jj_consume_token(SUPER);
    list = ActualParameters();
    {if (true) return new CSuperCallExpression(list);}
    throw new Error("Missing return statement in function");
  }

  final public IExpression MethodCallSuffix(IExpression Target) throws ParseException {
  Token MethodMixin, MethodName;
  CExpressionList list;
    jj_consume_token(39);
    MethodMixin = jj_consume_token(ID);
    jj_consume_token(39);
    MethodName = jj_consume_token(ID);
    list = ActualParameters();
    {if (true) return new CMethodCallExpression(Target, MethodMixin.image, MethodName.image, list);}
    throw new Error("Missing return statement in function");
  }

  final public IExpression FieldSelectSuffix(IExpression Target) throws ParseException {
  Token MixinName, FieldName;
    jj_consume_token(39);
    MixinName = jj_consume_token(ID);
    jj_consume_token(39);
    FieldName = jj_consume_token(ID);
   {if (true) return new CFieldSelectExpression(Target, MixinName.image, FieldName.image);}
    throw new Error("Missing return statement in function");
  }

  final public IExpression BaseExpression() throws ParseException {
  IExpression res;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      jj_consume_token(THIS);
           res = new CThisExpression();
      break;
    case SUPER:
      res = SuperExpression();
      break;
    case TRUE:
      jj_consume_token(TRUE);
           res = new CBooleanLiteral(true);
      break;
    case FALSE:
      jj_consume_token(FALSE);
            res = new CBooleanLiteral(false);
      break;
    case BYTE_LITERAL:
      t = jj_consume_token(BYTE_LITERAL);
                        res = new CByteLiteral(Byte.parseByte(t.image.substring(2), 16));
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                           res = new CIntegerLiteral(Integer.parseInt(t.image));
      break;
    case FLOAT_LITERAL:
      t = jj_consume_token(FLOAT_LITERAL);
                         res = new CFloatLiteral(Float.parseFloat(t.image));
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                           res = new CStringLiteral (t.image);
      break;
    case NULL:
      jj_consume_token(NULL);
            res = new CNullExpression();
      break;
    case ID:
      t = jj_consume_token(ID);
             res = new CIdentifierExpression(t.image);
      break;
    case 41:
      jj_consume_token(41);
      res = Expression();
      jj_consume_token(42);
      break;
    case NEW:
      res = ObjectCreation();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      if (jj_2_4(6)) {
        res = MethodCallSuffix(res);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 39:
          res = FieldSelectSuffix(res);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public IExpression BinaryOperatorSuffix(IExpression left) throws ParseException {
  IExpression right;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      jj_consume_token(45);
      right = BaseExpression();
                if(right.GetTypeString() != "Integer")
                        {if (true) return new CBinaryExpressionAdd (left, right);}
                else
                        {if (true) return new CBinaryExpressionAdd (right, left);}
      break;
    case 46:
      jj_consume_token(46);
      right = BaseExpression();
                if(right.GetTypeString() != "Integer")
                        {if (true) return new CBinaryExpressionSub (left, right);}
                else
                        {if (true) return new CBinaryExpressionSub (right, left);}
      break;
    case 47:
      jj_consume_token(47);
      right = BaseExpression();
                if(right.GetTypeString() != "Integer")
                        {if (true) return new CBinaryExpressionDivide (left, right);}
                else
                        {if (true) return new CBinaryExpressionDivide (right, left);}
      break;
    case 48:
      jj_consume_token(48);
      right = BaseExpression();
                if(right.GetTypeString() != "Integer")
                        {if (true) return new CBinaryExpressionMultiply (left, right);}
                else
                        {if (true) return new CBinaryExpressionMultiply (right, left);}
      break;
    case 49:
      jj_consume_token(49);
      right = BaseExpression();
                                 {if (true) return new CBinaryExpressionStrongEqual (left, right);}
      break;
    case 50:
      jj_consume_token(50);
      right = BaseExpression();
                                {if (true) return new CBinaryExpressionEqual (left, right);}
      break;
    case 51:
      jj_consume_token(51);
      right = BaseExpression();
                                 {if (true) return new CBinaryExpressionLeq (left, right);}
      break;
    case 52:
      jj_consume_token(52);
      right = BaseExpression();
                                {if (true) return new CBinaryExpressionLess (left, right);}
      break;
    case 53:
      jj_consume_token(53);
      right = BaseExpression();
                                 {if (true) return new CBinaryExpressionLeq (right, left);}
      break;
    case 54:
      jj_consume_token(54);
      right = BaseExpression();
                                {if (true) return new CBinaryExpressionLess (right, left);}
      break;
    case 55:
      jj_consume_token(55);
      right = BaseExpression();
                                 {if (true) return new CBinaryExpressionNeq (right, left);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IExpression Expression() throws ParseException {
  IExpression res;
    res = BaseExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      res = BinaryOperatorSuffix(res);
    }
   {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public CInitializationOfParam ActualInitializationOfOneParam() throws ParseException {
  Token MixinName, ParName; IExpression expr;
    MixinName = jj_consume_token(ID);
    jj_consume_token(39);
    ParName = jj_consume_token(ID);
    jj_consume_token(40);
    expr = Expression();
   {if (true) return new CInitializationOfParam(MixinName.image, ParName.image, expr);}
    throw new Error("Missing return statement in function");
  }

  final public CInitializationOfParams ActualInitializationOfParams() throws ParseException {
  CInitializationOfParams res = new CInitializationOfParams();
  CInitializationOfParam tmp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      tmp = ActualInitializationOfOneParam();
          res.add (tmp);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 44:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
        jj_consume_token(44);
        tmp = ActualInitializationOfOneParam();
              res.add(tmp);
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
     {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public IExpression ObjectCreation() throws ParseException {
  IMixinExpression expr;
  CInitializationOfParams initialization;
    jj_consume_token(NEW);
    expr = MixinExpression();
    jj_consume_token(56);
    initialization = ActualInitializationOfParams();
    jj_consume_token(57);
    {if (true) return new CObjectCreation(expr, initialization);}
    throw new Error("Missing return statement in function");
  }

/* --------------------------- GLOBAL DECLARATIONS ------------------------------------- */
  final public IDeclaration Declaration() throws ParseException {
  IDeclaration res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MIXIN:
      res = MixinDeclaration();
      break;
    case LET:
      res = LetDeclaration();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(43);
   {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public IMixinExpression MixinExpressionOrVoid() throws ParseException {
  IMixinExpression res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
            {if (true) return new CMixinExpressionVoid();}
      break;
    case ID:
    case 41:
      res = MixinExpression();
                            {if (true) return res;}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IMixinExpression MixinExpressionHOApplication() throws ParseException {
  Token t1, t2;
  IMixinExpression value;
    jj_consume_token(WHERE);
    t1 = jj_consume_token(ID);
    jj_consume_token(39);
    t2 = jj_consume_token(ID);
    jj_consume_token(40);
    jj_consume_token(41);
    value = MixinExpression();
    jj_consume_token(42);
   {if (true) return new CMixinExpressionApplication(t1.image, t2.image, value);}
    throw new Error("Missing return statement in function");
  }

  final public IMixinExpression MixinExpressionID() throws ParseException {
  Token Name;
    Name = jj_consume_token(ID);
              {if (true) return new CMixinExpressionIdentifier( Name.image);}
    throw new Error("Missing return statement in function");
  }

  final public IMixinExpression MixinExpression() throws ParseException {
  IMixinExpression res, temp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
      jj_consume_token(41);
      res = MixinExpression();
      jj_consume_token(42);
      break;
    case ID:
      res = MixinExpressionID();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 44:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_6;
        }
        jj_consume_token(44);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          temp = MixinExpressionID();
          break;
        case WHERE:
          temp = MixinExpressionHOApplication();
          break;
        case 41:
          jj_consume_token(41);
          temp = MixinExpression();
          jj_consume_token(42);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
           res = new CMixinExpressionConcatenation(res, temp);
      }
    {if (true) return res;}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*  ---------------- CLASS MEMBERS ---------------- */
  final public CFieldDeclaration FieldDeclaration() throws ParseException {
  Token name;
  IMixinExpression Type;
    name = jj_consume_token(ID);
    jj_consume_token(58);
    Type = MixinExpression();
   {if (true) return new CFieldDeclaration(name.image, Type);}
    throw new Error("Missing return statement in function");
  }

  final public CSourceInitializationParameter InputInitializationParameter(String MixinName) throws ParseException {
  Token ParamName;
  IMixinExpression Type;
    ParamName = jj_consume_token(ID);
    jj_consume_token(58);
    Type = MixinExpression();
    {if (true) return new CSourceInitializationParameter(  MixinName, ParamName.image, Type );}
    throw new Error("Missing return statement in function");
  }

  final public CSourceInitializationParameters InputInitializationParameters(String MixinName) throws ParseException {
  CSourceInitializationParameter par;
  CSourceInitializationParameters list = new CSourceInitializationParameters();
    jj_consume_token(41);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      par = InputInitializationParameter(MixinName);
                                                        list.add (par);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 43:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_7;
        }
        jj_consume_token(43);
        par = InputInitializationParameter(MixinName);
                                                             list.add (par);
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(42);
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public CSourceInitializationParameter OutputInitializationParameter() throws ParseException {
  Token MixinName, ParamName;
    MixinName = jj_consume_token(ID);
    jj_consume_token(39);
    ParamName = jj_consume_token(ID);
    {if (true) return new CSourceInitializationParameter(  MixinName.image, ParamName.image, null );}
    throw new Error("Missing return statement in function");
  }

  final public CSourceInitializationParameters OutputInitializationParameters() throws ParseException {
  CSourceInitializationParameter par;
  CSourceInitializationParameters list = new CSourceInitializationParameters();
    jj_consume_token(41);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      par = OutputInitializationParameter();
                                                list.add (par);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 44:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_8;
        }
        jj_consume_token(44);
        par = OutputInitializationParameter();
                                                     list.add (par);
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(42);
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public CParameterDeclaration ParameterDecl() throws ParseException {
  Token Name; IMixinExpression Type;
    Name = jj_consume_token(ID);
    jj_consume_token(58);
    Type = MixinExpression();
    {if (true) return new CParameterDeclaration(Name.image, Type);}
    throw new Error("Missing return statement in function");
  }

  final public CParameterDeclarations ParametersDecl() throws ParseException {
   CParameterDeclarations res = new CParameterDeclarations();
   CParameterDeclaration decl;
    jj_consume_token(41);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      decl = ParameterDecl();
            res.add(decl);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 43:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_9;
        }
        jj_consume_token(43);
        decl = ParameterDecl();
                 res.add(decl);
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(42);
   {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public CVariableDeclarations localVariablesDeclaration() throws ParseException {
  Token Name;
  IMixinExpression type;
  CVariableDeclarations res = new CVariableDeclarations();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_10;
      }
      Name = jj_consume_token(ID);
      jj_consume_token(58);
      type = MixinExpression();
      jj_consume_token(43);
      res.add ( new CVariableDeclaration (Name.image, type) );
    }
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public CIniModuleSuperInstruction ModuleSuperCall() throws ParseException {
  CInitializationOfParams params;
    jj_consume_token(SUPER);
    jj_consume_token(56);
    params = ActualInitializationOfParams();
    jj_consume_token(57);
    jj_consume_token(43);
                                                             {if (true) return new CIniModuleSuperInstruction(params);}
    throw new Error("Missing return statement in function");
  }

  final public CIniModuleBody IniModuleBody() throws ParseException {
  CVariableDeclarations vars;
  CInstructions instrs, instrs2;
  CInstruction instr;
    vars = localVariablesDeclaration();
    jj_consume_token(BEGIN);
    instrs = Instructions();
    instr = ModuleSuperCall();
    instrs2 = Instructions();
    jj_consume_token(END);
    instrs.add(instr);
    instrs.addAll( instrs2 );
    {if (true) return new CIniModuleBody (vars, instrs);}
    throw new Error("Missing return statement in function");
  }

  final public CIniModuleDeclaration IniModuleDeclaration() throws ParseException {
  Token MixinName;
  CSourceInitializationParameters input, output;
  CIniModuleBody Body;
  int LineNo = getToken(1).beginLine;
  boolean isRequired;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REQUIRED:
      jj_consume_token(REQUIRED);
                isRequired=true;
      break;
    case OPTIONAL:
      jj_consume_token(OPTIONAL);
                                                isRequired=false;
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    MixinName = jj_consume_token(ID);
    input = InputInitializationParameters(MixinName.image);
    jj_consume_token(INITIALIZES);
    output = OutputInitializationParameters();
    Body = IniModuleBody();
     {if (true) return new CIniModuleDeclaration(isRequired, MixinName.image, input, output, Body, LineNo, FileName);}
    throw new Error("Missing return statement in function");
  }

/* --------------------------- METHOD DECLARATIONS ------------------------------------- */
  final public CMethodBody MethodBody() throws ParseException {
  CVariableDeclarations vars;
  CInstructions instrs;
    vars = localVariablesDeclaration();
    jj_consume_token(BEGIN);
    instrs = Instructions();
    jj_consume_token(END);
    {if (true) return new CMethodBody (vars, instrs);}
    throw new Error("Missing return statement in function");
  }

  final public INewMethodDeclaration NewMethodDeclaration() throws ParseException {
  IMixinExpression ResType;
  Token name;
  CMethodBody body;
  CParameterDeclarations pars;
  int linePos = getToken(1).beginLine;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
      ResType = MixinExpressionOrVoid();
      name = jj_consume_token(ID);
      pars = ParametersDecl();
    {if (true) return new CAbstractMethodDeclaration(ResType, name.image, pars, linePos, FileName);}
      break;
    case NEW:
      jj_consume_token(NEW);
      ResType = MixinExpressionOrVoid();
      name = jj_consume_token(ID);
      pars = ParametersDecl();
      body = MethodBody();
    {if (true) return  new CNewMethodDeclaration(ResType, name.image, pars, body, linePos, FileName);}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public COverrideMethodDeclaration OverrideMethodDeclaration() throws ParseException {
  IMixinExpression ResType;
  Token Mixinname, name;
  CMethodBody body;
  CParameterDeclarations pars;
  int LineNo = getToken(1).beginLine;
    jj_consume_token(OVERRIDE);
    ResType = MixinExpressionOrVoid();
    Mixinname = jj_consume_token(ID);
    jj_consume_token(39);
    name = jj_consume_token(ID);
    pars = ParametersDecl();
    body = MethodBody();
    {if (true) return new COverrideMethodDeclaration(ResType, Mixinname.image, name.image, pars, body, LineNo, FileName);}
    throw new Error("Missing return statement in function");
  }

  final public CPolymorphismParam PolymorphismParam() throws ParseException {
  Token t1;
  IMixinExpression expr;
    t1 = jj_consume_token(ID);
    jj_consume_token(51);
    expr = MixinExpression();
   {if (true) return new CPolymorphismParam(t1.image, expr);}
    throw new Error("Missing return statement in function");
  }

  final public CPolymorphismParams PolymorphismParams() throws ParseException {
  CPolymorphismParams res = new CPolymorphismParams();
  CPolymorphismParam par;
    par = PolymorphismParam();
                              res.add(par);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_11;
      }
      jj_consume_token(43);
      par = PolymorphismParam();
                                   res.add(par);
    }
   {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public IDeclaration MixinDeclaration() throws ParseException {
   IMixinExpression expr; Token mixinname;
   CFieldDeclaration fld;
   COverrideMethodDeclaration mtd;
   INewMethodDeclaration newmtd;
   CParameterDeclaration paramDecl;
   CIniModuleDeclaration iniModule;

   CFieldDeclarations flds = new CFieldDeclarations();
   CMethodDeclarations mtds = new CMethodDeclarations();
   CNewMethodDeclarations newmtds = new CNewMethodDeclarations();
   CParameterDeclarations paramDecls = new CParameterDeclarations();
   CPolymorphismParams polyPars =  new CPolymorphismParams();
   CIniModuleDeclarations iniModules = new CIniModuleDeclarations();
    jj_consume_token(MIXIN);
    mixinname = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 52:
      jj_consume_token(52);
      polyPars = PolymorphismParams();
      jj_consume_token(54);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(OF);
    expr = MixinExpressionOrVoid();
    jj_consume_token(50);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case ABSTRACT:
      case OVERRIDE:
      case REQUIRED:
      case OPTIONAL:
      case ID:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        fld = FieldDeclaration();
                                  flds.add(fld);
        break;
      case OVERRIDE:
        mtd = OverrideMethodDeclaration();
                                           mtds.add(mtd);
        break;
      case NEW:
      case ABSTRACT:
        newmtd = NewMethodDeclaration();
                                         newmtds.add(newmtd);
        break;
      case REQUIRED:
      case OPTIONAL:
        iniModule = IniModuleDeclaration();
                                           iniModules.add(iniModule);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(43);
    }
    jj_consume_token(END);
    {if (true) return new CMixinDeclaration(mixinname.image, expr, flds, newmtds, mtds, iniModules, polyPars);}
    throw new Error("Missing return statement in function");
  }

/* ---------------------  ANOTHER global declarations -------- */
  final public CLetDeclaration LetDeclaration() throws ParseException {
  Token name;
  IMixinExpression expr;
    jj_consume_token(LET);
    name = jj_consume_token(ID);
    jj_consume_token(50);
    expr = MixinExpression();
        {if (true) return new CLetDeclaration( name.image, expr);}
    throw new Error("Missing return statement in function");
  }

  final public CGlobalDeclarations IncludedDeclarations() throws ParseException {
  Token t;
  String fname=" --unknown--";
    jj_consume_token(INCLUDE);
    t = jj_consume_token(STRING_LITERAL);
    jj_consume_token(43);
    try{
      fname=t.image.substring(1,t.image.length()-1);
      {if (true) return CreateParser( fname ).GlobalDeclarations();}
    } catch (Exception exc)
    { {if (true) throw new Error ("Error in file "+fname+ ":"+exc.toString());}
    };
    throw new Error("Missing return statement in function");
  }

  final public CGlobalDeclarations GlobalDeclarations() throws ParseException {
  CGlobalDeclarations result = new CGlobalDeclarations();
  CGlobalDeclarations decls = null;
  IDeclaration decl;
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDE:
      case LET:
      case MIXIN:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LET:
      case MIXIN:
        decl = Declaration();
                         result.add(decl);
        break;
      case INCLUDE:
        decls = IncludedDeclarations();
                                    result.addAll(decls);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public CProgram Program() throws ParseException {
  CGlobalDeclarations decls ;
  CInstructions instrs;
    decls = GlobalDeclarations();
    instrs = Instructions();
    jj_consume_token(0);
   {if (true) return new CProgram(decls, instrs);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_3R_51() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(42)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(41)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(FLOAT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(BYTE_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(41)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(56)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(57)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(39)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(39)) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(40)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(39)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(39)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(44)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(THIS)) return true;
    if (jj_scan_token(39)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(39)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(41)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(55)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(53)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(52)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(51)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(50)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(41)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(49)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(48)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(44)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(42)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(47)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    }
    }
    if (jj_scan_token(43)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(46)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(NATIVEINSTRUCTION)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(WHERE)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(45)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x20000,0x8000000,0x14000000,0x0,0x12f000,0x12f000,0x0,0x0,0x0,0x0,0x0,0x0,0x20000800,0x10000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800000,0x300000,0x0,0x0,0x1f00000,0x1f00000,0x20000c00,0x20000c00,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x4,0x0,0x3,0x1000,0x27c,0x27c,0x80,0x80,0xffe000,0xffe000,0x1000,0x4,0x0,0x204,0x1000,0x204,0x204,0x800,0x4,0x1000,0x4,0x800,0x4,0x4,0x0,0x0,0x800,0x100000,0x4,0x4,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[59];
    for (int i = 0; i < 59; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
